
FF ACTUATOR MOTOR 2018.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  00001b14  00001ba8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000275  00800156  00800156  00001bfe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001bfe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004a0  00000000  00000000  00001c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004e3a  00000000  00000000  00002110  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001890  00000000  00000000  00006f4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003403  00000000  00000000  000087da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e64  00000000  00000000  0000bbe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00010483  00000000  00000000  0000ca44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003a42  00000000  00000000  0001cec7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000420  00000000  00000000  00020909  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000601c  00000000  00000000  00020d29  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	58 c0       	rjmp	.+176    	; 0xb2 <__ctors_end>
       2:	00 00       	nop
       4:	74 c0       	rjmp	.+232    	; 0xee <__bad_interrupt>
       6:	00 00       	nop
       8:	72 c0       	rjmp	.+228    	; 0xee <__bad_interrupt>
       a:	00 00       	nop
       c:	a7 c0       	rjmp	.+334    	; 0x15c <__vector_3>
       e:	00 00       	nop
      10:	6e c0       	rjmp	.+220    	; 0xee <__bad_interrupt>
      12:	00 00       	nop
      14:	6c c0       	rjmp	.+216    	; 0xee <__bad_interrupt>
      16:	00 00       	nop
      18:	6a c0       	rjmp	.+212    	; 0xee <__bad_interrupt>
      1a:	00 00       	nop
      1c:	68 c0       	rjmp	.+208    	; 0xee <__bad_interrupt>
      1e:	00 00       	nop
      20:	66 c0       	rjmp	.+204    	; 0xee <__bad_interrupt>
      22:	00 00       	nop
      24:	64 c0       	rjmp	.+200    	; 0xee <__bad_interrupt>
      26:	00 00       	nop
      28:	8f c0       	rjmp	.+286    	; 0x148 <__vector_10>
      2a:	00 00       	nop
      2c:	60 c0       	rjmp	.+192    	; 0xee <__bad_interrupt>
      2e:	00 00       	nop
      30:	5e c0       	rjmp	.+188    	; 0xee <__bad_interrupt>
      32:	00 00       	nop
      34:	5c c0       	rjmp	.+184    	; 0xee <__bad_interrupt>
      36:	00 00       	nop
      38:	5a c0       	rjmp	.+180    	; 0xee <__bad_interrupt>
      3a:	00 00       	nop
      3c:	cc c6       	rjmp	.+3480   	; 0xdd6 <__vector_15>
      3e:	00 00       	nop
      40:	56 c0       	rjmp	.+172    	; 0xee <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 b6 08 	jmp	0x116c	; 0x116c <__vector_17>
      48:	bf c4       	rjmp	.+2430   	; 0x9c8 <__vector_18>
      4a:	00 00       	nop
      4c:	50 c0       	rjmp	.+160    	; 0xee <__bad_interrupt>
      4e:	00 00       	nop
      50:	4e c0       	rjmp	.+156    	; 0xee <__bad_interrupt>
      52:	00 00       	nop
      54:	55 c2       	rjmp	.+1194   	; 0x500 <__vector_21>
      56:	00 00       	nop
      58:	35 c2       	rjmp	.+1130   	; 0x4c4 <__vector_22>
      5a:	00 00       	nop
      5c:	48 c0       	rjmp	.+144    	; 0xee <__bad_interrupt>
      5e:	00 00       	nop
      60:	46 c0       	rjmp	.+140    	; 0xee <__bad_interrupt>
      62:	00 00       	nop
      64:	44 c0       	rjmp	.+136    	; 0xee <__bad_interrupt>
      66:	00 00       	nop
      68:	42 c0       	rjmp	.+132    	; 0xee <__bad_interrupt>
      6a:	00 00       	nop
      6c:	40 c0       	rjmp	.+128    	; 0xee <__bad_interrupt>
      6e:	00 00       	nop
      70:	3e c0       	rjmp	.+124    	; 0xee <__bad_interrupt>
      72:	00 00       	nop
      74:	3c c0       	rjmp	.+120    	; 0xee <__bad_interrupt>
      76:	00 00       	nop
      78:	3a c0       	rjmp	.+116    	; 0xee <__bad_interrupt>
      7a:	00 00       	nop
      7c:	38 c0       	rjmp	.+112    	; 0xee <__bad_interrupt>
      7e:	00 00       	nop
      80:	78 c2       	rjmp	.+1264   	; 0x572 <__vector_32>
      82:	00 00       	nop
      84:	58 c2       	rjmp	.+1200   	; 0x536 <__vector_33>
      86:	00 00       	nop
      88:	32 c0       	rjmp	.+100    	; 0xee <__bad_interrupt>
      8a:	00 00       	nop
      8c:	30 c0       	rjmp	.+96     	; 0xee <__bad_interrupt>
      8e:	00 00       	nop
      90:	2e c0       	rjmp	.+92     	; 0xee <__bad_interrupt>
      92:	00 00       	nop
      94:	05 a8       	ldd	r0, Z+53	; 0x35
      96:	4c cd       	rjmp	.-1384   	; 0xfffffb30 <__eeprom_end+0xff7efb30>
      98:	b2 d4       	rcall	.+2404   	; 0x9fe <__vector_18+0x36>
      9a:	4e b9       	out	0x0e, r20	; 14
      9c:	38 36       	cpi	r19, 0x68	; 104
      9e:	a9 02       	muls	r26, r25
      a0:	0c 50       	subi	r16, 0x0C	; 12
      a2:	b9 91       	ld	r27, Y+
      a4:	86 88       	ldd	r8, Z+22	; 0x16
      a6:	08 3c       	cpi	r16, 0xC8	; 200
      a8:	a6 aa       	std	Z+54, r10	; 0x36
      aa:	aa 2a       	or	r10, r26
      ac:	be 00       	.word	0x00be	; ????
      ae:	00 00       	nop
      b0:	80 3f       	cpi	r24, 0xF0	; 240

000000b2 <__ctors_end>:
      b2:	11 24       	eor	r1, r1
      b4:	1f be       	out	0x3f, r1	; 63
      b6:	cf ef       	ldi	r28, 0xFF	; 255
      b8:	d0 e1       	ldi	r29, 0x10	; 16
      ba:	de bf       	out	0x3e, r29	; 62
      bc:	cd bf       	out	0x3d, r28	; 61

000000be <__do_copy_data>:
      be:	11 e0       	ldi	r17, 0x01	; 1
      c0:	a0 e0       	ldi	r26, 0x00	; 0
      c2:	b1 e0       	ldi	r27, 0x01	; 1
      c4:	e4 e1       	ldi	r30, 0x14	; 20
      c6:	fb e1       	ldi	r31, 0x1B	; 27
      c8:	00 e0       	ldi	r16, 0x00	; 0
      ca:	0b bf       	out	0x3b, r16	; 59
      cc:	02 c0       	rjmp	.+4      	; 0xd2 <__do_copy_data+0x14>
      ce:	07 90       	elpm	r0, Z+
      d0:	0d 92       	st	X+, r0
      d2:	a6 35       	cpi	r26, 0x56	; 86
      d4:	b1 07       	cpc	r27, r17
      d6:	d9 f7       	brne	.-10     	; 0xce <__do_copy_data+0x10>

000000d8 <__do_clear_bss>:
      d8:	23 e0       	ldi	r18, 0x03	; 3
      da:	a6 e5       	ldi	r26, 0x56	; 86
      dc:	b1 e0       	ldi	r27, 0x01	; 1
      de:	01 c0       	rjmp	.+2      	; 0xe2 <.do_clear_bss_start>

000000e0 <.do_clear_bss_loop>:
      e0:	1d 92       	st	X+, r1

000000e2 <.do_clear_bss_start>:
      e2:	ab 3c       	cpi	r26, 0xCB	; 203
      e4:	b2 07       	cpc	r27, r18
      e6:	e1 f7       	brne	.-8      	; 0xe0 <.do_clear_bss_loop>
      e8:	7e d2       	rcall	.+1276   	; 0x5e6 <main>
      ea:	0c 94 88 0d 	jmp	0x1b10	; 0x1b10 <_exit>

000000ee <__bad_interrupt>:
      ee:	88 cf       	rjmp	.-240    	; 0x0 <__vectors>

000000f0 <actuator_pwmSpeed>:
	PORTE &= ~ACTUATOR_IN;//UT AV/PÅ
	PORTE |= ACTUATOR_OUT;//UT AV/PÅ
}

void actuator_pwmSpeed(uint8_t speed){
	OCR3A=speed;
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
      f6:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	OCR3B=speed;
      fa:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
      fe:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	PORTE &= ~(1<<PE4);
     102:	74 98       	cbi	0x0e, 4	; 14
	PORTE &= ~(1<<PE3);
     104:	73 98       	cbi	0x0e, 3	; 14
     106:	08 95       	ret

00000108 <ads_1115_get_reading>:
     108:	cf 93       	push	r28
     10a:	df 93       	push	r29
     10c:	80 e9       	ldi	r24, 0x90	; 144
     10e:	ed d0       	rcall	.+474    	; 0x2ea <i2c_start>
     110:	80 e0       	ldi	r24, 0x00	; 0
     112:	10 d1       	rcall	.+544    	; 0x334 <i2c_write>
     114:	37 d1       	rcall	.+622    	; 0x384 <i2c_stop>
     116:	81 e9       	ldi	r24, 0x91	; 145
     118:	e8 d0       	rcall	.+464    	; 0x2ea <i2c_start>
     11a:	1e d1       	rcall	.+572    	; 0x358 <i2c_read_ack>
     11c:	d8 2f       	mov	r29, r24
     11e:	27 d1       	rcall	.+590    	; 0x36e <i2c_read_nack>
     120:	c8 2f       	mov	r28, r24
     122:	30 d1       	rcall	.+608    	; 0x384 <i2c_stop>
     124:	8c 2f       	mov	r24, r28
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	9d 2b       	or	r25, r29
     12a:	df 91       	pop	r29
     12c:	cf 91       	pop	r28
     12e:	08 95       	ret

00000130 <ads_1115_write_config>:
     130:	80 e9       	ldi	r24, 0x90	; 144
     132:	db d0       	rcall	.+438    	; 0x2ea <i2c_start>
     134:	81 e0       	ldi	r24, 0x01	; 1
     136:	fe d0       	rcall	.+508    	; 0x334 <i2c_write>
     138:	80 e4       	ldi	r24, 0x40	; 64
     13a:	fc d0       	rcall	.+504    	; 0x334 <i2c_write>
     13c:	80 ea       	ldi	r24, 0xA0	; 160
     13e:	fa d0       	rcall	.+500    	; 0x334 <i2c_write>
     140:	21 d1       	rcall	.+578    	; 0x384 <i2c_stop>
     142:	81 e0       	ldi	r24, 0x01	; 1
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	08 95       	ret

00000148 <__vector_10>:
#include <stdint.h>
#define F_CPU 8000000UL

int16_t k_p = 1;

ISR(TIMER2_OVF_vect) {
     148:	1f 92       	push	r1
     14a:	0f 92       	push	r0
     14c:	0f b6       	in	r0, 0x3f	; 63
     14e:	0f 92       	push	r0
     150:	11 24       	eor	r1, r1
	//adcReading=ads_1115_get_reading();
	//updatePID
}
     152:	0f 90       	pop	r0
     154:	0f be       	out	0x3f, r0	; 63
     156:	0f 90       	pop	r0
     158:	1f 90       	pop	r1
     15a:	18 95       	reti

0000015c <__vector_3>:
		return encoderDirection*60*1000000LL/dt16;
}
//returns speed measured using 8 bit timer 0
int32_t getEncoderSpeed(){
		return encoderDirection*60*1000000LL/dt;
}
     15c:	1f 92       	push	r1
     15e:	0f 92       	push	r0
     160:	0f b6       	in	r0, 0x3f	; 63
     162:	0f 92       	push	r0
     164:	11 24       	eor	r1, r1
     166:	0b b6       	in	r0, 0x3b	; 59
     168:	0f 92       	push	r0
     16a:	2f 93       	push	r18
     16c:	3f 93       	push	r19
     16e:	4f 93       	push	r20
     170:	5f 93       	push	r21
     172:	6f 93       	push	r22
     174:	7f 93       	push	r23
     176:	8f 93       	push	r24
     178:	9f 93       	push	r25
     17a:	af 93       	push	r26
     17c:	bf 93       	push	r27
     17e:	ef 93       	push	r30
     180:	ff 93       	push	r31
     182:	f8 94       	cli
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     18a:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <__data_end>
     18e:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <__data_end+0x1>
     192:	01 96       	adiw	r24, 0x01	; 1
     194:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <__data_end+0x1>
     198:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__data_end>
     19c:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <__data_end>
     1a0:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <__data_end+0x1>
     1a4:	84 3f       	cpi	r24, 0xF4	; 244
     1a6:	91 40       	sbci	r25, 0x01	; 1
     1a8:	39 f0       	breq	.+14     	; 0x1b8 <__vector_3+0x5c>
     1aa:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <__data_end>
     1ae:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <__data_end+0x1>
     1b2:	8c 30       	cpi	r24, 0x0C	; 12
     1b4:	9e 4f       	sbci	r25, 0xFE	; 254
     1b6:	e1 f4       	brne	.+56     	; 0x1f0 <__vector_3+0x94>
     1b8:	f8 94       	cli
     1ba:	3d d6       	rcall	.+3194   	; 0xe36 <get_T1_micros>
     1bc:	60 93 5c 01 	sts	0x015C, r22	; 0x80015c <dt16>
     1c0:	70 93 5d 01 	sts	0x015D, r23	; 0x80015d <dt16+0x1>
     1c4:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <dt16+0x2>
     1c8:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <dt16+0x3>
     1cc:	4a d6       	rcall	.+3220   	; 0xe62 <reset_T1>
     1ce:	83 e0       	ldi	r24, 0x03	; 3
     1d0:	4e d7       	rcall	.+3740   	; 0x106e <timer_elapsed_us>
     1d2:	60 93 58 01 	sts	0x0158, r22	; 0x800158 <dt>
     1d6:	70 93 59 01 	sts	0x0159, r23	; 0x800159 <dt+0x1>
     1da:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <dt+0x2>
     1de:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <dt+0x3>
     1e2:	83 e0       	ldi	r24, 0x03	; 3
     1e4:	67 d6       	rcall	.+3278   	; 0xeb4 <timer_start>
     1e6:	78 94       	sei
     1e8:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <__data_end+0x1>
     1ec:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <__data_end>
     1f0:	78 94       	sei
     1f2:	ff 91       	pop	r31
     1f4:	ef 91       	pop	r30
     1f6:	bf 91       	pop	r27
     1f8:	af 91       	pop	r26
     1fa:	9f 91       	pop	r25
     1fc:	8f 91       	pop	r24
     1fe:	7f 91       	pop	r23
     200:	6f 91       	pop	r22
     202:	5f 91       	pop	r21
     204:	4f 91       	pop	r20
     206:	3f 91       	pop	r19
     208:	2f 91       	pop	r18
     20a:	0f 90       	pop	r0
     20c:	0b be       	out	0x3b, r0	; 59
     20e:	0f 90       	pop	r0
     210:	0f be       	out	0x3f, r0	; 63
     212:	0f 90       	pop	r0
     214:	1f 90       	pop	r1
     216:	18 95       	reti

00000218 <initEncoder>:
     218:	45 d6       	rcall	.+3210   	; 0xea4 <timer_init>
     21a:	83 e0       	ldi	r24, 0x03	; 3
     21c:	4b d6       	rcall	.+3222   	; 0xeb4 <timer_start>
     21e:	00 d6       	rcall	.+3072   	; 0xe20 <init_timer16>
     220:	e9 e6       	ldi	r30, 0x69	; 105
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	80 81       	ld	r24, Z
     226:	80 63       	ori	r24, 0x30	; 48
     228:	80 83       	st	Z, r24
     22a:	ea 9a       	sbi	0x1d, 2	; 29
     22c:	08 95       	ret

0000022e <getEncoderSpeed16>:
     22e:	2f 92       	push	r2
     230:	3f 92       	push	r3
     232:	4f 92       	push	r4
     234:	5f 92       	push	r5
     236:	6f 92       	push	r6
     238:	7f 92       	push	r7
     23a:	8f 92       	push	r8
     23c:	9f 92       	push	r9
     23e:	af 92       	push	r10
     240:	bf 92       	push	r11
     242:	cf 92       	push	r12
     244:	df 92       	push	r13
     246:	ef 92       	push	r14
     248:	ff 92       	push	r15
     24a:	0f 93       	push	r16
     24c:	1f 93       	push	r17
     24e:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
     252:	40 90 5c 01 	lds	r4, 0x015C	; 0x80015c <dt16>
     256:	50 90 5d 01 	lds	r5, 0x015D	; 0x80015d <dt16+0x1>
     25a:	60 90 5e 01 	lds	r6, 0x015E	; 0x80015e <dt16+0x2>
     25e:	70 90 5f 01 	lds	r7, 0x015F	; 0x80015f <dt16+0x3>
     262:	8c e3       	ldi	r24, 0x3C	; 60
     264:	48 02       	muls	r20, r24
     266:	a0 01       	movw	r20, r0
     268:	11 24       	eor	r1, r1
     26a:	95 2f       	mov	r25, r21
     26c:	99 0f       	add	r25, r25
     26e:	99 0b       	sbc	r25, r25
     270:	68 94       	set
     272:	aa 24       	eor	r10, r10
     274:	a6 f8       	bld	r10, 6
     276:	0f 2e       	mov	r0, r31
     278:	f2 e4       	ldi	r31, 0x42	; 66
     27a:	bf 2e       	mov	r11, r31
     27c:	f0 2d       	mov	r31, r0
     27e:	0f 2e       	mov	r0, r31
     280:	ff e0       	ldi	r31, 0x0F	; 15
     282:	cf 2e       	mov	r12, r31
     284:	f0 2d       	mov	r31, r0
     286:	d1 2c       	mov	r13, r1
     288:	e1 2c       	mov	r14, r1
     28a:	f1 2c       	mov	r15, r1
     28c:	00 e0       	ldi	r16, 0x00	; 0
     28e:	10 e0       	ldi	r17, 0x00	; 0
     290:	24 2f       	mov	r18, r20
     292:	35 2f       	mov	r19, r21
     294:	49 2f       	mov	r20, r25
     296:	59 2f       	mov	r21, r25
     298:	69 2f       	mov	r22, r25
     29a:	79 2f       	mov	r23, r25
     29c:	89 2f       	mov	r24, r25
     29e:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__muldi3>
     2a2:	12 01       	movw	r2, r4
     2a4:	23 01       	movw	r4, r6
     2a6:	a2 2c       	mov	r10, r2
     2a8:	b3 2c       	mov	r11, r3
     2aa:	c4 2c       	mov	r12, r4
     2ac:	d5 2c       	mov	r13, r5
     2ae:	0e 94 ed 0b 	call	0x17da	; 0x17da <__divdi3>
     2b2:	62 2f       	mov	r22, r18
     2b4:	73 2f       	mov	r23, r19
     2b6:	84 2f       	mov	r24, r20
     2b8:	95 2f       	mov	r25, r21
     2ba:	1f 91       	pop	r17
     2bc:	0f 91       	pop	r16
     2be:	ff 90       	pop	r15
     2c0:	ef 90       	pop	r14
     2c2:	df 90       	pop	r13
     2c4:	cf 90       	pop	r12
     2c6:	bf 90       	pop	r11
     2c8:	af 90       	pop	r10
     2ca:	9f 90       	pop	r9
     2cc:	8f 90       	pop	r8
     2ce:	7f 90       	pop	r7
     2d0:	6f 90       	pop	r6
     2d2:	5f 90       	pop	r5
     2d4:	4f 90       	pop	r4
     2d6:	3f 90       	pop	r3
     2d8:	2f 90       	pop	r2
     2da:	08 95       	ret

000002dc <setEncoderDirection>:

void setEncoderDirection(int8_t newDir){
	encoderDirection = newDir;
     2dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     2e0:	08 95       	ret

000002e2 <i2c_init>:
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
     2e2:	89 ef       	ldi	r24, 0xF9	; 249
     2e4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     2e8:	08 95       	ret

000002ea <i2c_start>:
     2ea:	ec eb       	ldi	r30, 0xBC	; 188
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	10 82       	st	Z, r1
     2f0:	94 ea       	ldi	r25, 0xA4	; 164
     2f2:	90 83       	st	Z, r25
     2f4:	90 81       	ld	r25, Z
     2f6:	99 23       	and	r25, r25
     2f8:	ec f7       	brge	.-6      	; 0x2f4 <i2c_start+0xa>
     2fa:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     2fe:	98 7f       	andi	r25, 0xF8	; 248
     300:	98 30       	cpi	r25, 0x08	; 8
     302:	a1 f4       	brne	.+40     	; 0x32c <i2c_start+0x42>
     304:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     308:	84 e8       	ldi	r24, 0x84	; 132
     30a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     30e:	ec eb       	ldi	r30, 0xBC	; 188
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	80 81       	ld	r24, Z
     314:	88 23       	and	r24, r24
     316:	ec f7       	brge	.-6      	; 0x312 <i2c_start+0x28>
     318:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     31c:	98 7f       	andi	r25, 0xF8	; 248
     31e:	98 31       	cpi	r25, 0x18	; 24
     320:	39 f0       	breq	.+14     	; 0x330 <i2c_start+0x46>
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	90 34       	cpi	r25, 0x40	; 64
     326:	29 f4       	brne	.+10     	; 0x332 <i2c_start+0x48>
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	08 95       	ret
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	08 95       	ret
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	08 95       	ret

00000334 <i2c_write>:
     334:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     338:	84 e8       	ldi	r24, 0x84	; 132
     33a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     33e:	ec eb       	ldi	r30, 0xBC	; 188
     340:	f0 e0       	ldi	r31, 0x00	; 0
     342:	80 81       	ld	r24, Z
     344:	88 23       	and	r24, r24
     346:	ec f7       	brge	.-6      	; 0x342 <i2c_write+0xe>
     348:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     34c:	98 7f       	andi	r25, 0xF8	; 248
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	98 32       	cpi	r25, 0x28	; 40
     352:	09 f4       	brne	.+2      	; 0x356 <i2c_write+0x22>
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	08 95       	ret

00000358 <i2c_read_ack>:
     358:	84 ec       	ldi	r24, 0xC4	; 196
     35a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     35e:	ec eb       	ldi	r30, 0xBC	; 188
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	80 81       	ld	r24, Z
     364:	88 23       	and	r24, r24
     366:	ec f7       	brge	.-6      	; 0x362 <i2c_read_ack+0xa>
     368:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     36c:	08 95       	ret

0000036e <i2c_read_nack>:
     36e:	84 e8       	ldi	r24, 0x84	; 132
     370:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     374:	ec eb       	ldi	r30, 0xBC	; 188
     376:	f0 e0       	ldi	r31, 0x00	; 0
     378:	80 81       	ld	r24, Z
     37a:	88 23       	and	r24, r24
     37c:	ec f7       	brge	.-6      	; 0x378 <i2c_read_nack+0xa>
     37e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     382:	08 95       	ret

00000384 <i2c_stop>:

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     384:	84 e9       	ldi	r24, 0x94	; 148
     386:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     38a:	08 95       	ret

0000038c <uart0_putc>:
	//}
	
	uint8_t uart1_peek(void)
	{
		return rx1_buffer[(rx1_Tail+1) & RX1_BUFFER_MASK];
	}
     38c:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <tx0_Head>
     390:	9f 5f       	subi	r25, 0xFF	; 255
     392:	9f 71       	andi	r25, 0x1F	; 31
     394:	20 91 43 03 	lds	r18, 0x0343	; 0x800343 <tx0_Tail>
     398:	92 17       	cp	r25, r18
     39a:	e1 f3       	breq	.-8      	; 0x394 <uart0_putc+0x8>
     39c:	e9 2f       	mov	r30, r25
     39e:	f0 e0       	ldi	r31, 0x00	; 0
     3a0:	e6 57       	subi	r30, 0x76	; 118
     3a2:	fc 4f       	sbci	r31, 0xFC	; 252
     3a4:	80 83       	st	Z, r24
     3a6:	2f b7       	in	r18, 0x3f	; 63
     3a8:	f8 94       	cli
     3aa:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <tx0_Head>
     3ae:	e1 ec       	ldi	r30, 0xC1	; 193
     3b0:	f0 e0       	ldi	r31, 0x00	; 0
     3b2:	80 81       	ld	r24, Z
     3b4:	80 62       	ori	r24, 0x20	; 32
     3b6:	80 83       	st	Z, r24
     3b8:	2f bf       	out	0x3f, r18	; 63
     3ba:	08 95       	ret

000003bc <uart0_putstr>:
     3bc:	cf 93       	push	r28
     3be:	df 93       	push	r29
     3c0:	ec 01       	movw	r28, r24
     3c2:	21 96       	adiw	r28, 0x01	; 1
     3c4:	fc 01       	movw	r30, r24
     3c6:	80 81       	ld	r24, Z
     3c8:	88 23       	and	r24, r24
     3ca:	21 f0       	breq	.+8      	; 0x3d4 <uart0_putstr+0x18>
     3cc:	df df       	rcall	.-66     	; 0x38c <uart0_putc>
     3ce:	89 91       	ld	r24, Y+
     3d0:	81 11       	cpse	r24, r1
     3d2:	fc cf       	rjmp	.-8      	; 0x3cc <uart0_putstr+0x10>
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	08 95       	ret

000003da <uart0_putint>:
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
     3de:	cd b7       	in	r28, 0x3d	; 61
     3e0:	de b7       	in	r29, 0x3e	; 62
     3e2:	27 97       	sbiw	r28, 0x07	; 7
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	f8 94       	cli
     3e8:	de bf       	out	0x3e, r29	; 62
     3ea:	0f be       	out	0x3f, r0	; 63
     3ec:	cd bf       	out	0x3d, r28	; 61
     3ee:	4a e0       	ldi	r20, 0x0A	; 10
     3f0:	be 01       	movw	r22, r28
     3f2:	6f 5f       	subi	r22, 0xFF	; 255
     3f4:	7f 4f       	sbci	r23, 0xFF	; 255
     3f6:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__itoa_ncheck>
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	de df       	rcall	.-68     	; 0x3bc <uart0_putstr>
     400:	27 96       	adiw	r28, 0x07	; 7
     402:	0f b6       	in	r0, 0x3f	; 63
     404:	f8 94       	cli
     406:	de bf       	out	0x3e, r29	; 62
     408:	0f be       	out	0x3f, r0	; 63
     40a:	cd bf       	out	0x3d, r28	; 61
     40c:	df 91       	pop	r29
     40e:	cf 91       	pop	r28
     410:	08 95       	ret

00000412 <uart0_putlong>:
     412:	cf 93       	push	r28
     414:	df 93       	push	r29
     416:	cd b7       	in	r28, 0x3d	; 61
     418:	de b7       	in	r29, 0x3e	; 62
     41a:	2c 97       	sbiw	r28, 0x0c	; 12
     41c:	0f b6       	in	r0, 0x3f	; 63
     41e:	f8 94       	cli
     420:	de bf       	out	0x3e, r29	; 62
     422:	0f be       	out	0x3f, r0	; 63
     424:	cd bf       	out	0x3d, r28	; 61
     426:	2a e0       	ldi	r18, 0x0A	; 10
     428:	ae 01       	movw	r20, r28
     42a:	4f 5f       	subi	r20, 0xFF	; 255
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__ltoa_ncheck>
     432:	ce 01       	movw	r24, r28
     434:	01 96       	adiw	r24, 0x01	; 1
     436:	c2 df       	rcall	.-124    	; 0x3bc <uart0_putstr>
     438:	2c 96       	adiw	r28, 0x0c	; 12
     43a:	0f b6       	in	r0, 0x3f	; 63
     43c:	f8 94       	cli
     43e:	de bf       	out	0x3e, r29	; 62
     440:	0f be       	out	0x3f, r0	; 63
     442:	cd bf       	out	0x3d, r28	; 61
     444:	df 91       	pop	r29
     446:	cf 91       	pop	r28
     448:	08 95       	ret

0000044a <uart0_flush>:
     44a:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <tx0_Tail>
     44e:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <tx0_Head>
     452:	98 13       	cpse	r25, r24
     454:	fa cf       	rjmp	.-12     	; 0x44a <uart0_flush>
     456:	08 95       	ret

00000458 <uart0_getc>:
     458:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <rx0_Tail>
     45c:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <rx0_Head>
     460:	89 17       	cp	r24, r25
     462:	59 f0       	breq	.+22     	; 0x47a <uart0_getc+0x22>
     464:	8f 5f       	subi	r24, 0xFF	; 255
     466:	98 2f       	mov	r25, r24
     468:	9f 71       	andi	r25, 0x1F	; 31
     46a:	e9 2f       	mov	r30, r25
     46c:	f0 e0       	ldi	r31, 0x00	; 0
     46e:	ee 5d       	subi	r30, 0xDE	; 222
     470:	fc 4f       	sbci	r31, 0xFC	; 252
     472:	80 81       	ld	r24, Z
     474:	90 93 44 03 	sts	0x0344, r25	; 0x800344 <rx0_Tail>
     478:	08 95       	ret
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	08 95       	ret

0000047e <uart0_getln>:
     47e:	0f 93       	push	r16
     480:	1f 93       	push	r17
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
     486:	ec 01       	movw	r28, r24
     488:	61 30       	cpi	r22, 0x01	; 1
     48a:	b1 f0       	breq	.+44     	; 0x4b8 <uart0_getln+0x3a>
     48c:	62 50       	subi	r22, 0x02	; 2
     48e:	06 2f       	mov	r16, r22
     490:	10 e0       	ldi	r17, 0x00	; 0
     492:	0f 5f       	subi	r16, 0xFF	; 255
     494:	1f 4f       	sbci	r17, 0xFF	; 255
     496:	08 0f       	add	r16, r24
     498:	19 1f       	adc	r17, r25
     49a:	de df       	rcall	.-68     	; 0x458 <uart0_getc>
     49c:	88 83       	st	Y, r24
     49e:	88 23       	and	r24, r24
     4a0:	e1 f3       	breq	.-8      	; 0x49a <uart0_getln+0x1c>
     4a2:	8d 30       	cpi	r24, 0x0D	; 13
     4a4:	21 f4       	brne	.+8      	; 0x4ae <uart0_getln+0x30>
     4a6:	d8 df       	rcall	.-80     	; 0x458 <uart0_getc>
     4a8:	88 23       	and	r24, r24
     4aa:	e9 f3       	breq	.-6      	; 0x4a6 <uart0_getln+0x28>
     4ac:	05 c0       	rjmp	.+10     	; 0x4b8 <uart0_getln+0x3a>
     4ae:	21 96       	adiw	r28, 0x01	; 1
     4b0:	c0 17       	cp	r28, r16
     4b2:	d1 07       	cpc	r29, r17
     4b4:	91 f7       	brne	.-28     	; 0x49a <uart0_getln+0x1c>
     4b6:	e8 01       	movw	r28, r16
     4b8:	18 82       	st	Y, r1
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	1f 91       	pop	r17
     4c0:	0f 91       	pop	r16
     4c2:	08 95       	ret

000004c4 <__vector_22>:

#ifndef NO_TX0_INTERRUPT

	ISR(UDRE0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     4c4:	0f 93       	push	r16
     4c6:	0f b7       	in	r16, 0x3f	; 63
     4c8:	ef 93       	push	r30
     4ca:	ff 93       	push	r31
     4cc:	e0 91 43 03 	lds	r30, 0x0343	; 0x800343 <tx0_Tail>
     4d0:	f0 91 65 03 	lds	r31, 0x0365	; 0x800365 <tx0_Head>
     4d4:	e3 95       	inc	r30
     4d6:	ef 71       	andi	r30, 0x1F	; 31
     4d8:	ef 13       	cpse	r30, r31
     4da:	05 c0       	rjmp	.+10     	; 0x4e6 <USART0_TX_CONTINUE>
     4dc:	f0 91 c1 00 	lds	r31, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     4e0:	ff 7d       	andi	r31, 0xDF	; 223
     4e2:	f0 93 c1 00 	sts	0x00C1, r31	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

000004e6 <USART0_TX_CONTINUE>:
     4e6:	e0 93 43 03 	sts	0x0343, r30	; 0x800343 <tx0_Tail>
     4ea:	f0 e0       	ldi	r31, 0x00	; 0
     4ec:	e6 57       	subi	r30, 0x76	; 118
     4ee:	fc 4f       	sbci	r31, 0xFC	; 252
     4f0:	e0 81       	ld	r30, Z
     4f2:	e0 93 c6 00 	sts	0x00C6, r30	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

000004f6 <USART0_TX_EXIT>:
     4f6:	ff 91       	pop	r31
     4f8:	ef 91       	pop	r30
     4fa:	0f bf       	out	0x3f, r16	; 63
     4fc:	0f 91       	pop	r16
     4fe:	18 95       	reti

00000500 <__vector_21>:

#ifndef NO_RX0_INTERRUPT

	ISR(RX0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     500:	0f 93       	push	r16
     502:	0f b7       	in	r16, 0x3f	; 63
     504:	9f 93       	push	r25
     506:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     50a:	ef 93       	push	r30
     50c:	ff 93       	push	r31
     50e:	e0 91 86 03 	lds	r30, 0x0386	; 0x800386 <rx0_Head>
     512:	f0 91 44 03 	lds	r31, 0x0344	; 0x800344 <rx0_Tail>
     516:	e3 95       	inc	r30
     518:	ef 71       	andi	r30, 0x1F	; 31
     51a:	fe 17       	cp	r31, r30
     51c:	31 f0       	breq	.+12     	; 0x52a <USART0_RX_EXIT>
     51e:	e0 93 86 03 	sts	0x0386, r30	; 0x800386 <rx0_Head>
     522:	f0 e0       	ldi	r31, 0x00	; 0
     524:	ee 5d       	subi	r30, 0xDE	; 222
     526:	fc 4f       	sbci	r31, 0xFC	; 252
     528:	90 83       	st	Z, r25

0000052a <USART0_RX_EXIT>:
     52a:	ff 91       	pop	r31
     52c:	ef 91       	pop	r30
     52e:	9f 91       	pop	r25
     530:	0f bf       	out	0x3f, r16	; 63
     532:	0f 91       	pop	r16
     534:	18 95       	reti

00000536 <__vector_33>:

#ifndef NO_TX1_INTERRUPT

	ISR(UDRE1_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     536:	0f 93       	push	r16
     538:	0f b7       	in	r16, 0x3f	; 63
     53a:	ef 93       	push	r30
     53c:	ff 93       	push	r31
     53e:	e0 91 87 03 	lds	r30, 0x0387	; 0x800387 <tx1_Tail>
     542:	f0 91 89 03 	lds	r31, 0x0389	; 0x800389 <tx1_Head>
     546:	e3 95       	inc	r30
     548:	ef 71       	andi	r30, 0x1F	; 31
     54a:	ef 13       	cpse	r30, r31
     54c:	05 c0       	rjmp	.+10     	; 0x558 <USART1_TX_CONTINUE>
     54e:	f0 91 c9 00 	lds	r31, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
     552:	ff 7d       	andi	r31, 0xDF	; 223
     554:	f0 93 c9 00 	sts	0x00C9, r31	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

00000558 <USART1_TX_CONTINUE>:
     558:	e0 93 87 03 	sts	0x0387, r30	; 0x800387 <tx1_Tail>
     55c:	f0 e0       	ldi	r31, 0x00	; 0
     55e:	eb 5b       	subi	r30, 0xBB	; 187
     560:	fc 4f       	sbci	r31, 0xFC	; 252
     562:	e0 81       	ld	r30, Z
     564:	e0 93 ce 00 	sts	0x00CE, r30	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>

00000568 <USART1_TX_EXIT>:
     568:	ff 91       	pop	r31
     56a:	ef 91       	pop	r30
     56c:	0f bf       	out	0x3f, r16	; 63
     56e:	0f 91       	pop	r16
     570:	18 95       	reti

00000572 <__vector_32>:

#ifndef NO_RX1_INTERRUPT
	
	ISR(RX1_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     572:	0f 93       	push	r16
     574:	0f b7       	in	r16, 0x3f	; 63
     576:	9f 93       	push	r25
     578:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     57c:	ef 93       	push	r30
     57e:	ff 93       	push	r31
     580:	e0 91 88 03 	lds	r30, 0x0388	; 0x800388 <rx1_Head>
     584:	f0 91 42 03 	lds	r31, 0x0342	; 0x800342 <rx1_Tail>
     588:	e3 95       	inc	r30
     58a:	ef 71       	andi	r30, 0x1F	; 31
     58c:	fe 17       	cp	r31, r30
     58e:	31 f0       	breq	.+12     	; 0x59c <USART1_RX_EXIT>
     590:	e0 93 88 03 	sts	0x0388, r30	; 0x800388 <rx1_Head>
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	ea 59       	subi	r30, 0x9A	; 154
     598:	fc 4f       	sbci	r31, 0xFC	; 252
     59a:	90 83       	st	Z, r25

0000059c <USART1_RX_EXIT>:
     59c:	ff 91       	pop	r31
     59e:	ef 91       	pop	r30
     5a0:	9f 91       	pop	r25
     5a2:	0f bf       	out	0x3f, r16	; 63
     5a4:	0f 91       	pop	r16
     5a6:	18 95       	reti

000005a8 <pwm_start>:
	TCCR3A = 0;
	PORTE &= ~( (1<<PE3)|(1<<PE4) );	// low level on both h-bridge inputs
}
void setpwm(uint8_t duty){
		OCR3A= duty;
		OCR3B= duty;
     5a8:	8d b1       	in	r24, 0x0d	; 13
     5aa:	88 61       	ori	r24, 0x18	; 24
     5ac:	8d b9       	out	0x0d, r24	; 13
     5ae:	e1 e9       	ldi	r30, 0x91	; 145
     5b0:	f0 e0       	ldi	r31, 0x00	; 0
     5b2:	80 81       	ld	r24, Z
     5b4:	81 60       	ori	r24, 0x01	; 1
     5b6:	80 83       	st	Z, r24
     5b8:	a0 e9       	ldi	r26, 0x90	; 144
     5ba:	b0 e0       	ldi	r27, 0x00	; 0
     5bc:	8c 91       	ld	r24, X
     5be:	82 6b       	ori	r24, 0xB2	; 178
     5c0:	8c 93       	st	X, r24
     5c2:	80 81       	ld	r24, Z
     5c4:	88 61       	ori	r24, 0x18	; 24
     5c6:	80 83       	st	Z, r24
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
     5d0:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
     5d4:	08 95       	ret

000005d6 <pwm_stop>:
     5d6:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
     5da:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     5de:	8e b1       	in	r24, 0x0e	; 14
     5e0:	87 7e       	andi	r24, 0xE7	; 231
     5e2:	8e b9       	out	0x0e, r24	; 14
     5e4:	08 95       	ret

000005e6 <main>:
}


int main (void)
{	
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	cd b7       	in	r28, 0x3d	; 61
     5ec:	de b7       	in	r29, 0x3e	; 62
     5ee:	a1 97       	sbiw	r28, 0x21	; 33
     5f0:	0f b6       	in	r0, 0x3f	; 63
     5f2:	f8 94       	cli
     5f4:	de bf       	out	0x3e, r29	; 62
     5f6:	0f be       	out	0x3f, r0	; 63
     5f8:	cd bf       	out	0x3d, r28	; 61
	pwm_start();	//inits pwm for h bridge control
     5fa:	d6 df       	rcall	.-84     	; 0x5a8 <pwm_start>
	rgbled_init();
     5fc:	44 d4       	rcall	.+2184   	; 0xe86 <rgbled_init>
	rgbled_turn_on(LED_ALL);
     5fe:	80 ee       	ldi	r24, 0xE0	; 224
     600:	48 d4       	rcall	.+2192   	; 0xe92 <rgbled_turn_on>
     602:	84 e1       	ldi	r24, 0x14	; 20
	TCCR3B = 0;
	TCCR3A = 0;
	PORTE &= ~( (1<<PE3)|(1<<PE4) );	// low level on both h-bridge inputs
}
void setpwm(uint8_t duty){
		OCR3A= duty;
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     60a:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     60e:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
		OCR3B= duty;
     612:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	int16_t x, x_ref, e, u;
	float kp = 0.7;
	char msg[22]; // heading, 20 digit bytes, NULL
	
	setpwm(duty);
	i2c_init();
     616:	65 de       	rcall	.-822    	; 0x2e2 <i2c_init>
	ads_1115_write_config();
     618:	8b dd       	rcall	.-1258   	; 0x130 <ads_1115_write_config>
     61a:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	{
	#ifdef USART0_RS485_MODE
		___DDR(RS485_CONTROL0_IOPORTNAME) |= (1<<RS485_CONTROL0_PIN); // default pin state is low
	#endif
		
		UBRR0L_REGISTER = (uint8_t) ubrr_value;
     61e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
		
	#ifdef USART_SKIP_UBRRH_IF_ZERO
		if(__builtin_constant_p(ubrr_value))
			if(((ubrr_value>>8) != 0)) // requires -Os flag - do not use in non-inline functions
	#endif
			UBRR0H_REGISTER = (ubrr_value>>8);
     622:	88 e9       	ldi	r24, 0x98	; 152
		#endif
	#elif defined(USART0_MPCM_MODE)
		UCSR0A_REGISTER |= (1<<MPCM0_BIT);
	#endif
		
		UCSR0B_REGISTER = USART0_CONFIG_B;
     624:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	uart_init(BAUD_CALC(500000)); // 8n1 transmission is set as default
	uart_puts("Ei gude wie?");
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	91 e0       	ldi	r25, 0x01	; 1
	initEncoder();	
     62c:	c7 de       	rcall	.-626    	; 0x3bc <uart0_putstr>
     62e:	f4 dd       	rcall	.-1048   	; 0x218 <initEncoder>
	can_init(0,0);
     630:	60 e0       	ldi	r22, 0x00	; 0
     632:	70 e0       	ldi	r23, 0x00	; 0
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	b8 d2       	rcall	.+1392   	; 0xbaa <can_init>
     63a:	78 94       	sei
	sei();
     63c:	8e e2       	ldi	r24, 0x2E	; 46
	
	firstGearPosition = eeprom_read_word((uint16_t*)46);
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <eeprom_read_word>
     644:	c8 2e       	mov	r12, r24
     646:	d9 2e       	mov	r13, r25
     648:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <firstGearPosition>
     64c:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <firstGearPosition+0x1>
     650:	8c e2       	ldi	r24, 0x2C	; 44
	secondGearPosition = eeprom_read_word((uint16_t*)44);
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <eeprom_read_word>
     658:	90 93 b9 03 	sts	0x03B9, r25	; 0x8003b9 <secondGearPosition+0x1>
     65c:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <secondGearPosition>
     660:	8a e2       	ldi	r24, 0x2A	; 42
	idlePosition = eeprom_read_word((uint16_t*)42);
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <eeprom_read_word>
     668:	90 93 bf 03 	sts	0x03BF, r25	; 0x8003bf <idlePosition+0x1>
     66c:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <idlePosition>
	x_ref = firstGearPosition;
     670:	ec 2c       	mov	r14, r12
	
	task_start(TASK_LED, 1000);	//task 1 is due after 1000 interrupt cycles 
     672:	fd 2c       	mov	r15, r13
     674:	68 ee       	ldi	r22, 0xE8	; 232
     676:	73 e0       	ldi	r23, 0x03	; 3
     678:	80 e0       	ldi	r24, 0x00	; 0
	task_start(TASK_UART_WRITE,50);
     67a:	4b d5       	rcall	.+2710   	; 0x1112 <task_start>
     67c:	62 e3       	ldi	r22, 0x32	; 50
     67e:	70 e0       	ldi	r23, 0x00	; 0
     680:	83 e0       	ldi	r24, 0x03	; 3
	task_start(TASK_UART_READ,50);
     682:	47 d5       	rcall	.+2702   	; 0x1112 <task_start>
     684:	62 e3       	ldi	r22, 0x32	; 50
     686:	70 e0       	ldi	r23, 0x00	; 0
     688:	81 e0       	ldi	r24, 0x01	; 1
	task_start(TASK_CAN_TX, 100);
     68a:	43 d5       	rcall	.+2694   	; 0x1112 <task_start>
     68c:	64 e6       	ldi	r22, 0x64	; 100
     68e:	70 e0       	ldi	r23, 0x00	; 0
     690:	84 e0       	ldi	r24, 0x04	; 4
	task_start(TASK_CAN_RX, 10);
     692:	3f d5       	rcall	.+2686   	; 0x1112 <task_start>
     694:	6a e0       	ldi	r22, 0x0A	; 10
     696:	70 e0       	ldi	r23, 0x00	; 0
     698:	85 e0       	ldi	r24, 0x05	; 5
     69a:	3b d5       	rcall	.+2678   	; 0x1112 <task_start>
	task_start(TASK_P_CONTROLLER,1);
     69c:	61 e0       	ldi	r22, 0x01	; 1
     69e:	70 e0       	ldi	r23, 0x00	; 0
     6a0:	82 e0       	ldi	r24, 0x02	; 2
     6a2:	37 d5       	rcall	.+2670   	; 0x1112 <task_start>
     6a4:	0f 2e       	mov	r0, r31
				if(strcmp(msg, "sine") == 0) {
					timer_start(6);	
					task_start(TASK_SINE,5);
				}
				if(atoi(msg)!=0){
					reference_gear = 10;		//just an unrealistic gear number
     6a6:	fa e0       	ldi	r31, 0x0A	; 10
     6a8:	2f 2e       	mov	r2, r31
     6aa:	f0 2d       	mov	r31, r0
     6ac:	68 94       	set
				if(strcmp(msg, "f") == 0) {
					reference_gear = 1;
					x_ref = firstGearPosition;
				}
				if(strcmp(msg, "s") == 0) {
					reference_gear = 2;
     6ae:	55 24       	eor	r5, r5
     6b0:	51 f8       	bld	r5, 1
     6b2:	0f 2e       	mov	r0, r31
						
			task_is_done(TASK_UART_READ);
		}
		if(task_is_due(TASK_CAN_TX)){
			// Send message
			txFrame.id = ACTUATOR_CAN_ID;
     6b4:	f0 ec       	ldi	r31, 0xC0	; 192
     6b6:	cf 2e       	mov	r12, r31
     6b8:	f3 e0       	ldi	r31, 0x03	; 3
     6ba:	df 2e       	mov	r13, r31
     6bc:	f0 2d       	mov	r31, r0
     6be:	68 94       	set
     6c0:	66 24       	eor	r6, r6
     6c2:	65 f8       	bld	r6, 5
     6c4:	77 24       	eor	r7, r7
     6c6:	73 94       	inc	r7
     6c8:	33 24       	eor	r3, r3
	task_start(TASK_CAN_RX, 10);
	task_start(TASK_P_CONTROLLER,1);
	

	while(1){
		if(get_T1_micros() > 50000UL){	//set motor speed to zero if no pulse has occurred for a long time
     6ca:	3a 94       	dec	r3
     6cc:	41 2c       	mov	r4, r1
     6ce:	b3 d3       	rcall	.+1894   	; 0xe36 <get_T1_micros>
     6d0:	61 35       	cpi	r22, 0x51	; 81
     6d2:	73 4c       	sbci	r23, 0xC3	; 195
			setEncoderDirection(0);
     6d4:	81 05       	cpc	r24, r1
     6d6:	91 05       	cpc	r25, r1
			
		}
		if (task_is_due(TASK_LED)){
     6d8:	10 f0       	brcs	.+4      	; 0x6de <main+0xf8>
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	ff dd       	rcall	.-1026   	; 0x2dc <setEncoderDirection>
			rgbled_toggle(LED_ALL);
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	39 d5       	rcall	.+2674   	; 0x1154 <task_is_due>
			task_is_done(TASK_LED);
     6e2:	88 23       	and	r24, r24
     6e4:	21 f0       	breq	.+8      	; 0x6ee <main+0x108>
		}
		if (task_is_due(TASK_UART_WRITE)){
     6e6:	80 ee       	ldi	r24, 0xE0	; 224
     6e8:	d9 d3       	rcall	.+1970   	; 0xe9c <rgbled_toggle>
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	39 d5       	rcall	.+2674   	; 0x1160 <task_is_done>
			uart_putint(getEncoderAngle());
			uart_puts("|");
			uart_putint(x);
			uart_puts("\r\n");*/

						uart_putint(x_ref);
     6ee:	83 e0       	ldi	r24, 0x03	; 3
     6f0:	31 d5       	rcall	.+2658   	; 0x1154 <task_is_due>
						uart_puts("|");
     6f2:	88 23       	and	r24, r24
     6f4:	09 f4       	brne	.+2      	; 0x6f8 <main+0x112>
     6f6:	30 c0       	rjmp	.+96     	; 0x758 <main+0x172>
						uart_putint(x);
     6f8:	c7 01       	movw	r24, r14
     6fa:	6f de       	rcall	.-802    	; 0x3da <uart0_putint>
						uart_puts("|");
     6fc:	8e e0       	ldi	r24, 0x0E	; 14
     6fe:	91 e0       	ldi	r25, 0x01	; 1
     700:	5d de       	rcall	.-838    	; 0x3bc <uart0_putstr>
     702:	c4 01       	movw	r24, r8
						uart_putint(u);
     704:	6a de       	rcall	.-812    	; 0x3da <uart0_putint>
     706:	8e e0       	ldi	r24, 0x0E	; 14
     708:	91 e0       	ldi	r25, 0x01	; 1
						uart_puts("|");
     70a:	58 de       	rcall	.-848    	; 0x3bc <uart0_putstr>
     70c:	c8 01       	movw	r24, r16
     70e:	65 de       	rcall	.-822    	; 0x3da <uart0_putint>
						uart_putint(reference_gear);
     710:	8e e0       	ldi	r24, 0x0E	; 14
     712:	91 e0       	ldi	r25, 0x01	; 1
     714:	53 de       	rcall	.-858    	; 0x3bc <uart0_putstr>
						uart_puts("|");
     716:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <reference_gear>
     71a:	90 e0       	ldi	r25, 0x00	; 0
						uart_putint(current_gear);
     71c:	5e de       	rcall	.-836    	; 0x3da <uart0_putint>
     71e:	8e e0       	ldi	r24, 0x0E	; 14
     720:	91 e0       	ldi	r25, 0x01	; 1
     722:	4c de       	rcall	.-872    	; 0x3bc <uart0_putstr>
     724:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <current_gear>
						uart_puts("|");
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	57 de       	rcall	.-850    	; 0x3da <uart0_putint>
     72c:	8e e0       	ldi	r24, 0x0E	; 14
						uart_putlong(adr);
     72e:	91 e0       	ldi	r25, 0x01	; 1
     730:	45 de       	rcall	.-886    	; 0x3bc <uart0_putstr>
     732:	60 91 bc 03 	lds	r22, 0x03BC	; 0x8003bc <adr>
     736:	70 91 bd 03 	lds	r23, 0x03BD	; 0x8003bd <adr+0x1>
     73a:	07 2e       	mov	r0, r23
     73c:	00 0c       	add	r0, r0
     73e:	88 0b       	sbc	r24, r24
						uart_puts("|");
     740:	99 0b       	sbc	r25, r25
     742:	67 de       	rcall	.-818    	; 0x412 <uart0_putlong>
     744:	8e e0       	ldi	r24, 0x0E	; 14
     746:	91 e0       	ldi	r25, 0x01	; 1
						uart_putlong(getEncoderSpeed16());
     748:	39 de       	rcall	.-910    	; 0x3bc <uart0_putstr>
     74a:	71 dd       	rcall	.-1310   	; 0x22e <getEncoderSpeed16>
						uart_puts("\r\n");
     74c:	62 de       	rcall	.-828    	; 0x412 <uart0_putlong>
     74e:	80 e1       	ldi	r24, 0x10	; 16
     750:	91 e0       	ldi	r25, 0x01	; 1
						
			task_is_done(TASK_UART_WRITE);
     752:	34 de       	rcall	.-920    	; 0x3bc <uart0_putstr>
     754:	83 e0       	ldi	r24, 0x03	; 3
     756:	04 d5       	rcall	.+2568   	; 0x1160 <task_is_done>
		}
		if (task_is_due(TASK_UART_READ)){
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	fc d4       	rcall	.+2552   	; 0x1154 <task_is_due>
     75c:	88 23       	and	r24, r24
     75e:	09 f4       	brne	.+2      	; 0x762 <main+0x17c>
     760:	9e c0       	rjmp	.+316    	; 0x89e <main+0x2b8>
		int16_t uart0_getData(void); // reads single byte from a buffer // returns negative value if buffer is empty (upper byte is non zero)
		uint8_t uart0_LoadData(uint8_t *data); // reads single byte from a buffer and loads it into *data byte
		// in case of empty buffers returned flag is set to BUFFER_EMPTY - NULL
		
		extern volatile uint8_t rx0_Head, rx0_Tail;
		inline uint8_t uart0_AvailableBytes(void) { return (rx0_Head - rx0_Tail) & RX0_BUFFER_MASK; }
     762:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <rx0_Head>
     766:	90 91 44 03 	lds	r25, 0x0344	; 0x800344 <rx0_Tail>
			if(uart_AvailableBytes()!=0){
     76a:	89 1b       	sub	r24, r25
     76c:	8f 71       	andi	r24, 0x1F	; 31
     76e:	09 f4       	brne	.+2      	; 0x772 <main+0x18c>
     770:	94 c0       	rjmp	.+296    	; 0x89a <main+0x2b4>
				
				//uart0_getlnToFirstWhiteSpace(msg, 12);	// reads until first white space
				uart0_getln(msg, 22);						// reads until \r\n
     772:	66 e1       	ldi	r22, 0x16	; 22
     774:	ce 01       	movw	r24, r28
     776:	01 96       	adiw	r24, 0x01	; 1
     778:	82 de       	rcall	.-764    	; 0x47e <uart0_getln>
     77a:	63 e1       	ldi	r22, 0x13	; 19
				
				if(strcmp(msg, "release") == 0){
     77c:	71 e0       	ldi	r23, 0x01	; 1
     77e:	ce 01       	movw	r24, r28
     780:	01 96       	adiw	r24, 0x01	; 1
     782:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <strcmp>
     786:	89 2b       	or	r24, r25
     788:	29 f4       	brne	.+10     	; 0x794 <main+0x1ae>
     78a:	25 df       	rcall	.-438    	; 0x5d6 <pwm_stop>
					 pwm_stop();
     78c:	86 e0       	ldi	r24, 0x06	; 6
     78e:	d5 d4       	rcall	.+2474   	; 0x113a <task_stop>
					 task_stop(TASK_SINE);
     790:	86 e0       	ldi	r24, 0x06	; 6
     792:	e7 d3       	rcall	.+1998   	; 0xf62 <timer_stop>
     794:	6b e1       	ldi	r22, 0x1B	; 27
					 timer_stop(6);
     796:	71 e0       	ldi	r23, 0x01	; 1
     798:	ce 01       	movw	r24, r28
     79a:	01 96       	adiw	r24, 0x01	; 1
				}
				if(strcmp(msg, "start") == 0) pwm_start();
     79c:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <strcmp>
     7a0:	89 2b       	or	r24, r25
     7a2:	09 f4       	brne	.+2      	; 0x7a6 <main+0x1c0>
     7a4:	01 df       	rcall	.-510    	; 0x5a8 <pwm_start>
     7a6:	61 e2       	ldi	r22, 0x21	; 33
     7a8:	71 e0       	ldi	r23, 0x01	; 1
     7aa:	ce 01       	movw	r24, r28
     7ac:	01 96       	adiw	r24, 0x01	; 1
     7ae:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <strcmp>
				if(strcmp(msg, "setFirstGearPos") == 0) {
     7b2:	89 2b       	or	r24, r25
     7b4:	49 f4       	brne	.+18     	; 0x7c8 <main+0x1e2>
     7b6:	b4 01       	movw	r22, r8
     7b8:	8e e2       	ldi	r24, 0x2E	; 46
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <eeprom_write_word>
					eeprom_write_word ((uint16_t *)46, x);
     7c0:	90 92 ac 03 	sts	0x03AC, r9	; 0x8003ac <firstGearPosition+0x1>
     7c4:	80 92 ab 03 	sts	0x03AB, r8	; 0x8003ab <firstGearPosition>
     7c8:	61 e3       	ldi	r22, 0x31	; 49
					firstGearPosition = x;
     7ca:	71 e0       	ldi	r23, 0x01	; 1
     7cc:	ce 01       	movw	r24, r28
     7ce:	01 96       	adiw	r24, 0x01	; 1
     7d0:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <strcmp>
				}
				if(strcmp(msg, "setSecondGearPos") == 0) {
     7d4:	89 2b       	or	r24, r25
     7d6:	49 f4       	brne	.+18     	; 0x7ea <main+0x204>
     7d8:	b4 01       	movw	r22, r8
     7da:	8c e2       	ldi	r24, 0x2C	; 44
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <eeprom_write_word>
					eeprom_write_word ((uint16_t *)44, x);
     7e2:	90 92 b9 03 	sts	0x03B9, r9	; 0x8003b9 <secondGearPosition+0x1>
     7e6:	80 92 b8 03 	sts	0x03B8, r8	; 0x8003b8 <secondGearPosition>
     7ea:	62 e4       	ldi	r22, 0x42	; 66
					secondGearPosition = x;
     7ec:	71 e0       	ldi	r23, 0x01	; 1
     7ee:	ce 01       	movw	r24, r28
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <strcmp>
				}
				if(strcmp(msg, "setIdlePos") == 0) {
     7f6:	89 2b       	or	r24, r25
     7f8:	49 f4       	brne	.+18     	; 0x80c <main+0x226>
     7fa:	b4 01       	movw	r22, r8
     7fc:	8a e2       	ldi	r24, 0x2A	; 42
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <eeprom_write_word>
					eeprom_write_word ((uint16_t *)42, x);
     804:	90 92 bf 03 	sts	0x03BF, r9	; 0x8003bf <idlePosition+0x1>
     808:	80 92 be 03 	sts	0x03BE, r8	; 0x8003be <idlePosition>
     80c:	6d e4       	ldi	r22, 0x4D	; 77
					idlePosition = x;
     80e:	71 e0       	ldi	r23, 0x01	; 1
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <strcmp>
				}
				if(strcmp(msg, "f") == 0) {
     818:	89 2b       	or	r24, r25
     81a:	39 f4       	brne	.+14     	; 0x82a <main+0x244>
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <reference_gear>
     822:	e0 90 ab 03 	lds	r14, 0x03AB	; 0x8003ab <firstGearPosition>
					reference_gear = 1;
     826:	f0 90 ac 03 	lds	r15, 0x03AC	; 0x8003ac <firstGearPosition+0x1>
					x_ref = firstGearPosition;
     82a:	6b e4       	ldi	r22, 0x4B	; 75
     82c:	71 e0       	ldi	r23, 0x01	; 1
     82e:	ce 01       	movw	r24, r28
				}
				if(strcmp(msg, "s") == 0) {
     830:	01 96       	adiw	r24, 0x01	; 1
     832:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <strcmp>
     836:	89 2b       	or	r24, r25
     838:	31 f4       	brne	.+12     	; 0x846 <main+0x260>
     83a:	50 92 aa 03 	sts	0x03AA, r5	; 0x8003aa <reference_gear>
     83e:	e0 90 b8 03 	lds	r14, 0x03B8	; 0x8003b8 <secondGearPosition>
					reference_gear = 2;
     842:	f0 90 b9 03 	lds	r15, 0x03B9	; 0x8003b9 <secondGearPosition+0x1>
					x_ref = secondGearPosition;
     846:	6f e4       	ldi	r22, 0x4F	; 79
     848:	71 e0       	ldi	r23, 0x01	; 1
				}
				if(strcmp(msg, "n") == 0) {
     84a:	ce 01       	movw	r24, r28
     84c:	01 96       	adiw	r24, 0x01	; 1
     84e:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <strcmp>
     852:	89 2b       	or	r24, r25
     854:	31 f4       	brne	.+12     	; 0x862 <main+0x27c>
					reference_gear = 0;
     856:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <reference_gear>
					x_ref = idlePosition;
     85a:	e0 90 be 03 	lds	r14, 0x03BE	; 0x8003be <idlePosition>
     85e:	f0 90 bf 03 	lds	r15, 0x03BF	; 0x8003bf <idlePosition+0x1>
				}
				if(strcmp(msg, "sine") == 0) {
     862:	61 e5       	ldi	r22, 0x51	; 81
     864:	71 e0       	ldi	r23, 0x01	; 1
     866:	ce 01       	movw	r24, r28
     868:	01 96       	adiw	r24, 0x01	; 1
     86a:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <strcmp>
					timer_start(6);	
     86e:	89 2b       	or	r24, r25
     870:	31 f4       	brne	.+12     	; 0x87e <main+0x298>
					task_start(TASK_SINE,5);
     872:	86 e0       	ldi	r24, 0x06	; 6
     874:	1f d3       	rcall	.+1598   	; 0xeb4 <timer_start>
     876:	65 e0       	ldi	r22, 0x05	; 5
     878:	70 e0       	ldi	r23, 0x00	; 0
				}
				if(atoi(msg)!=0){
     87a:	86 e0       	ldi	r24, 0x06	; 6
     87c:	4a d4       	rcall	.+2196   	; 0x1112 <task_start>
     87e:	ce 01       	movw	r24, r28
     880:	01 96       	adiw	r24, 0x01	; 1
     882:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <atoi>
					reference_gear = 10;		//just an unrealistic gear number
     886:	89 2b       	or	r24, r25
     888:	39 f0       	breq	.+14     	; 0x898 <main+0x2b2>
					 x_ref=atoi(msg);
     88a:	20 92 aa 03 	sts	0x03AA, r2	; 0x8003aa <reference_gear>
     88e:	ce 01       	movw	r24, r28
     890:	01 96       	adiw	r24, 0x01	; 1
     892:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <atoi>
				}
				uart_flush();
     896:	7c 01       	movw	r14, r24
			}	
						
			task_is_done(TASK_UART_READ);
     898:	d8 dd       	rcall	.-1104   	; 0x44a <uart0_flush>
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	61 d4       	rcall	.+2242   	; 0x1160 <task_is_done>
		}
		if(task_is_due(TASK_CAN_TX)){
     89e:	84 e0       	ldi	r24, 0x04	; 4
     8a0:	59 d4       	rcall	.+2226   	; 0x1154 <task_is_due>
     8a2:	88 23       	and	r24, r24
     8a4:	81 f0       	breq	.+32     	; 0x8c6 <main+0x2e0>
     8a6:	f6 01       	movw	r30, r12
			// Send message
			txFrame.id = ACTUATOR_CAN_ID;
     8a8:	71 82       	std	Z+1, r7	; 0x01
     8aa:	60 82       	st	Z, r6
     8ac:	83 e0       	ldi	r24, 0x03	; 3
			txFrame.length = 3;
     8ae:	82 83       	std	Z+2, r24	; 0x02
     8b0:	be dc       	rcall	.-1668   	; 0x22e <getEncoderSpeed16>
			
			txFrame.data.i16[0] = getEncoderSpeed16();
     8b2:	f6 01       	movw	r30, r12
     8b4:	74 83       	std	Z+4, r23	; 0x04
     8b6:	63 83       	std	Z+3, r22	; 0x03
     8b8:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <current_gear>
			txFrame.data.u8[2] = current_gear;
     8bc:	85 83       	std	Z+5, r24	; 0x05
			//txFrame.data.u8[2] = 0;
			
			can_send_message(&txFrame);
     8be:	c6 01       	movw	r24, r12
     8c0:	0c d2       	rcall	.+1048   	; 0xcda <can_send_message>
			
		task_is_done(TASK_CAN_TX);
     8c2:	84 e0       	ldi	r24, 0x04	; 4
     8c4:	4d d4       	rcall	.+2202   	; 0x1160 <task_is_done>
     8c6:	85 e0       	ldi	r24, 0x05	; 5
		}
		if (task_is_due(TASK_CAN_RX)){
     8c8:	45 d4       	rcall	.+2186   	; 0x1154 <task_is_due>
     8ca:	88 23       	and	r24, r24
     8cc:	29 f1       	breq	.+74     	; 0x918 <main+0x332>
     8ce:	ce 01       	movw	r24, r28
     8d0:	47 96       	adiw	r24, 0x17	; 23
			// Read message
			CanMessage_t rx;
			if (can_read_message_if_new(&rx)){
     8d2:	c0 d1       	rcall	.+896    	; 0xc54 <can_read_message_if_new>
     8d4:	88 23       	and	r24, r24
     8d6:	f1 f0       	breq	.+60     	; 0x914 <main+0x32e>
     8d8:	8f 89       	ldd	r24, Y+23	; 0x17
     8da:	98 8d       	ldd	r25, Y+24	; 0x18
				adr = rx.id;
     8dc:	90 93 bd 03 	sts	0x03BD, r25	; 0x8003bd <adr+0x1>
     8e0:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <adr>
     8e4:	2a 8d       	ldd	r18, Y+26	; 0x1a
				data = rx.data.u8[0];
     8e6:	20 93 bb 03 	sts	0x03BB, r18	; 0x8003bb <data>
     8ea:	81 35       	cpi	r24, 0x51	; 81
				if(rx.id == CONTROLLER_CAN_ID) {//receiving can messages from the motor controller
     8ec:	92 40       	sbci	r25, 0x02	; 2
     8ee:	91 f4       	brne	.+36     	; 0x914 <main+0x32e>
     8f0:	21 11       	cpse	r18, r1
								
					if(rx.data.u8[0]==0){ reference_gear = 0; x_ref = idlePosition;}
     8f2:	07 c0       	rjmp	.+14     	; 0x902 <main+0x31c>
     8f4:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <reference_gear>
     8f8:	e0 90 be 03 	lds	r14, 0x03BE	; 0x8003be <idlePosition>
     8fc:	f0 90 bf 03 	lds	r15, 0x03BF	; 0x8003bf <idlePosition+0x1>
     900:	09 c0       	rjmp	.+18     	; 0x914 <main+0x32e>
					if(rx.data.u8[0]==1){ reference_gear = 1; x_ref = firstGearPosition;}
     902:	21 30       	cpi	r18, 0x01	; 1
     904:	39 f4       	brne	.+14     	; 0x914 <main+0x32e>
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <reference_gear>
     90c:	e0 90 ab 03 	lds	r14, 0x03AB	; 0x8003ab <firstGearPosition>
     910:	f0 90 ac 03 	lds	r15, 0x03AC	; 0x8003ac <firstGearPosition+0x1>
				}
			}
			task_is_done(TASK_CAN_RX);
     914:	85 e0       	ldi	r24, 0x05	; 5
     916:	24 d4       	rcall	.+2120   	; 0x1160 <task_is_done>
     918:	85 2d       	mov	r24, r5
		}
		if (task_is_due(TASK_P_CONTROLLER)){
     91a:	1c d4       	rcall	.+2104   	; 0x1154 <task_is_due>
     91c:	88 23       	and	r24, r24
     91e:	a1 f1       	breq	.+104    	; 0x988 <main+0x3a2>
     920:	f3 db       	rcall	.-2074   	; 0x108 <ads_1115_get_reading>
			x = ads_1115_get_reading();
     922:	4c 01       	movw	r8, r24
     924:	57 01       	movw	r10, r14
     926:	a8 1a       	sub	r10, r24
			e = x_ref-x;
     928:	b9 0a       	sbc	r11, r25
     92a:	b5 01       	movw	r22, r10
			u = kp*e+128;
     92c:	0b 2c       	mov	r0, r11
     92e:	00 0c       	add	r0, r0
     930:	88 0b       	sbc	r24, r24
     932:	99 0b       	sbc	r25, r25
     934:	8d d5       	rcall	.+2842   	; 0x1450 <__floatsisf>
     936:	23 e3       	ldi	r18, 0x33	; 51
     938:	33 e3       	ldi	r19, 0x33	; 51
     93a:	43 e3       	ldi	r20, 0x33	; 51
     93c:	5f e3       	ldi	r21, 0x3F	; 63
     93e:	14 d6       	rcall	.+3112   	; 0x1568 <__mulsf3>
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e0       	ldi	r20, 0x00	; 0
     946:	53 e4       	ldi	r21, 0x43	; 67
     948:	84 d4       	rcall	.+2312   	; 0x1252 <__addsf3>
     94a:	4f d5       	rcall	.+2718   	; 0x13ea <__fixsfsi>
     94c:	6f 3f       	cpi	r22, 0xFF	; 255
     94e:	71 05       	cpc	r23, r1
     950:	19 f0       	breq	.+6      	; 0x958 <main+0x372>
     952:	14 f0       	brlt	.+4      	; 0x958 <main+0x372>
     954:	63 2d       	mov	r22, r3
     956:	74 2d       	mov	r23, r4
     958:	8b 01       	movw	r16, r22
     95a:	77 23       	and	r23, r23
     95c:	14 f4       	brge	.+4      	; 0x962 <main+0x37c>
			if(u>255) u = 255;
			if(u<0) u = 0;
			actuator_pwmSpeed(u);
     95e:	00 e0       	ldi	r16, 0x00	; 0
     960:	10 e0       	ldi	r17, 0x00	; 0
     962:	80 2f       	mov	r24, r16
			//check if target position has been reached
			if(e<POSITION_TOLERANCE && -e<POSITION_TOLERANCE){
     964:	c5 db       	rcall	.-2166   	; 0xf0 <actuator_pwmSpeed>
     966:	22 e3       	ldi	r18, 0x32	; 50
     968:	a2 16       	cp	r10, r18
     96a:	b1 04       	cpc	r11, r1
     96c:	5c f4       	brge	.+22     	; 0x984 <main+0x39e>
     96e:	b1 94       	neg	r11
     970:	a1 94       	neg	r10
     972:	b1 08       	sbc	r11, r1
     974:	32 e3       	ldi	r19, 0x32	; 50
     976:	a3 16       	cp	r10, r19
     978:	b1 04       	cpc	r11, r1
				current_gear = reference_gear;
     97a:	24 f4       	brge	.+8      	; 0x984 <main+0x39e>
     97c:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <reference_gear>
     980:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <current_gear>
			}
			task_is_done(TASK_P_CONTROLLER);
     984:	85 2d       	mov	r24, r5
     986:	ec d3       	rcall	.+2008   	; 0x1160 <task_is_done>
		}
		if(task_is_due(TASK_SINE)){
     988:	86 e0       	ldi	r24, 0x06	; 6
     98a:	e4 d3       	rcall	.+1992   	; 0x1154 <task_is_due>
     98c:	88 23       	and	r24, r24
     98e:	09 f4       	brne	.+2      	; 0x992 <main+0x3ac>
     990:	9e ce       	rjmp	.-708    	; 0x6ce <main+0xe8>
     992:	86 e0       	ldi	r24, 0x06	; 6
			x_ref = sin((double)timer_elapsed_ms(6)/500)*8000+10000;
     994:	ec d2       	rcall	.+1496   	; 0xf6e <timer_elapsed_ms>
     996:	bc 01       	movw	r22, r24
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	57 d5       	rcall	.+2734   	; 0x144c <__floatunsisf>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	4a ef       	ldi	r20, 0xFA	; 250
     9a4:	53 e4       	ldi	r21, 0x43	; 67
     9a6:	b9 d4       	rcall	.+2418   	; 0x131a <__divsf3>
     9a8:	42 d6       	rcall	.+3204   	; 0x162e <sin>
     9aa:	20 e0       	ldi	r18, 0x00	; 0
     9ac:	30 e0       	ldi	r19, 0x00	; 0
     9ae:	4a ef       	ldi	r20, 0xFA	; 250
     9b0:	55 e4       	ldi	r21, 0x45	; 69
     9b2:	da d5       	rcall	.+2996   	; 0x1568 <__mulsf3>
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e4       	ldi	r19, 0x40	; 64
     9b8:	4c e1       	ldi	r20, 0x1C	; 28
     9ba:	56 e4       	ldi	r21, 0x46	; 70
     9bc:	4a d4       	rcall	.+2196   	; 0x1252 <__addsf3>
     9be:	15 d5       	rcall	.+2602   	; 0x13ea <__fixsfsi>
     9c0:	7b 01       	movw	r14, r22
     9c2:	86 e0       	ldi	r24, 0x06	; 6
     9c4:	cd d3       	rcall	.+1946   	; 0x1160 <task_is_done>
     9c6:	83 ce       	rjmp	.-762    	; 0x6ce <main+0xe8>

000009c8 <__vector_18>:

/**************************************************************************************************
*   CAN ISR - See 'can.h' Header file for Description
**************************************************************************************************/
ISR(CANIT_vect)
{
     9c8:	1f 92       	push	r1
     9ca:	0f 92       	push	r0
     9cc:	0f b6       	in	r0, 0x3f	; 63
     9ce:	0f 92       	push	r0
     9d0:	11 24       	eor	r1, r1
     9d2:	0b b6       	in	r0, 0x3b	; 59
     9d4:	0f 92       	push	r0
     9d6:	2f 93       	push	r18
     9d8:	3f 93       	push	r19
     9da:	4f 93       	push	r20
     9dc:	5f 93       	push	r21
     9de:	6f 93       	push	r22
     9e0:	8f 93       	push	r24
     9e2:	9f 93       	push	r25
     9e4:	af 93       	push	r26
     9e6:	bf 93       	push	r27
     9e8:	ef 93       	push	r30
     9ea:	ff 93       	push	r31
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	1f 92       	push	r1
     9f2:	cd b7       	in	r28, 0x3d	; 61
     9f4:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t mob_status;

	uint8_t mob_interrupts = CANSIT2;
     9f6:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>

	// TX
	if ((mob_interrupts & (1 << SIT0)) && (CANIE2 & (1 << ENMOB0))) {
     9fa:	80 ff       	sbrs	r24, 0
     9fc:	47 c0       	rjmp	.+142    	; 0xa8c <__vector_18+0xc4>
     9fe:	90 91 de 00 	lds	r25, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     a02:	90 ff       	sbrs	r25, 0
     a04:	43 c0       	rjmp	.+134    	; 0xa8c <__vector_18+0xc4>
		CANPAGE = (0x0 << MOBNB0); //Select TX Mob (Mob0)
     a06:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		mob_status = CANSTMOB;
     a0a:	ee ee       	ldi	r30, 0xEE	; 238
     a0c:	f0 e0       	ldi	r31, 0x00	; 0
     a0e:	80 81       	ld	r24, Z
     a10:	89 83       	std	Y+1, r24	; 0x01
		CANSTMOB &= ~(1 << TXOK); //clear MB1, TX interrupt
     a12:	80 81       	ld	r24, Z
     a14:	8f 7b       	andi	r24, 0xBF	; 191
     a16:	80 83       	st	Z, r24

		if (tx_on != tx_off) {
     a18:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <tx_off>
     a1c:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <tx_on>
     a20:	98 17       	cp	r25, r24
     a22:	89 f1       	breq	.+98     	; 0xa86 <__vector_18+0xbe>
			unsigned char pos;
			pos = tx_off & (TX_SIZE-1);
			//set ID
			CANIDT4 = tx_frames[pos].array[0];
     a24:	8f 70       	andi	r24, 0x0F	; 15
     a26:	2b e0       	ldi	r18, 0x0B	; 11
     a28:	82 9f       	mul	r24, r18
     a2a:	c0 01       	movw	r24, r0
     a2c:	11 24       	eor	r1, r1
     a2e:	fc 01       	movw	r30, r24
     a30:	ea 5e       	subi	r30, 0xEA	; 234
     a32:	fd 4f       	sbci	r31, 0xFD	; 253
     a34:	20 81       	ld	r18, Z
     a36:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			CANIDT2 = tx_frames[pos].array[0];
     a3a:	20 81       	ld	r18, Z
     a3c:	20 93 f2 00 	sts	0x00F2, r18	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
			CANIDT1 = tx_frames[pos].array[1];
     a40:	21 81       	ldd	r18, Z+1	; 0x01
     a42:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

			//program data registers - auto increment CANMSG
			CANMSG = tx_frames[pos].data[0];
     a46:	23 81       	ldd	r18, Z+3	; 0x03
     a48:	aa ef       	ldi	r26, 0xFA	; 250
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[1];
     a4e:	24 81       	ldd	r18, Z+4	; 0x04
     a50:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[2];
     a52:	25 81       	ldd	r18, Z+5	; 0x05
     a54:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[3];
     a56:	26 81       	ldd	r18, Z+6	; 0x06
     a58:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[4];
     a5a:	27 81       	ldd	r18, Z+7	; 0x07
     a5c:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[5];
     a5e:	20 85       	ldd	r18, Z+8	; 0x08
     a60:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[6];
     a62:	21 85       	ldd	r18, Z+9	; 0x09
     a64:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[7];
     a66:	22 85       	ldd	r18, Z+10	; 0x0a
     a68:	2c 93       	st	X, r18

			//set length and request send
			CANCDMOB = (1 << CONMOB0) | tx_frames[pos].length;
     a6a:	fc 01       	movw	r30, r24
     a6c:	e8 5e       	subi	r30, 0xE8	; 232
     a6e:	fd 4f       	sbci	r31, 0xFD	; 253
     a70:	80 81       	ld	r24, Z
     a72:	8f 70       	andi	r24, 0x0F	; 15
     a74:	80 64       	ori	r24, 0x40	; 64
     a76:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
			tx_off++;
     a7a:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <tx_off>
     a7e:	8f 5f       	subi	r24, 0xFF	; 255
     a80:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <tx_off>
     a84:	7d c0       	rjmp	.+250    	; 0xb80 <__vector_18+0x1b8>
		} else {
			tx_busy = 0;
     a86:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <tx_busy>
     a8a:	7a c0       	rjmp	.+244    	; 0xb80 <__vector_18+0x1b8>
		}
	}
	// RX
	else if ((mob_interrupts & (1 << SIT1)) && (CANIE2 & (1 << ENMOB1))) {
     a8c:	81 ff       	sbrs	r24, 1
     a8e:	78 c0       	rjmp	.+240    	; 0xb80 <__vector_18+0x1b8>
     a90:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     a94:	81 ff       	sbrs	r24, 1
     a96:	74 c0       	rjmp	.+232    	; 0xb80 <__vector_18+0x1b8>
		//Select RX Mob (Mob1)
		CANPAGE = (0x1 << MOBNB0);
     a98:	80 e1       	ldi	r24, 0x10	; 16
     a9a:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		if (((rx_on - rx_off) & RX_ABS_MASK) < RX_SIZE) {
     a9e:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <rx_on>
     aa2:	28 2f       	mov	r18, r24
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <rx_off>
     aaa:	29 1b       	sub	r18, r25
     aac:	31 09       	sbc	r19, r1
     aae:	2f 77       	andi	r18, 0x7F	; 127
     ab0:	33 27       	eor	r19, r19
     ab2:	20 31       	cpi	r18, 0x10	; 16
     ab4:	31 05       	cpc	r19, r1
     ab6:	0c f0       	brlt	.+2      	; 0xaba <__vector_18+0xf2>
     ab8:	58 c0       	rjmp	.+176    	; 0xb6a <__vector_18+0x1a2>
			unsigned char pos;
			pos = rx_on & (RX_SIZE-1);
			//Read length
			rx_frames[pos].length = CANCDMOB & 0x0F;
     aba:	e8 2f       	mov	r30, r24
     abc:	ef 70       	andi	r30, 0x0F	; 15
     abe:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     ac2:	2e 2f       	mov	r18, r30
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	4b e0       	ldi	r20, 0x0B	; 11
     ac8:	e4 9f       	mul	r30, r20
     aca:	f0 01       	movw	r30, r0
     acc:	11 24       	eor	r1, r1
     ace:	ea 59       	subi	r30, 0x9A	; 154
     ad0:	fe 4f       	sbci	r31, 0xFE	; 254
     ad2:	9f 70       	andi	r25, 0x0F	; 15
     ad4:	42 81       	ldd	r20, Z+2	; 0x02
     ad6:	40 7f       	andi	r20, 0xF0	; 240
     ad8:	94 2b       	or	r25, r20
     ada:	92 83       	std	Z+2, r25	; 0x02
			//Read ID
			rx_frames[pos].array[0] = (CANIDT2 & 0xE0) | (CANIDT4 & 0x07);
     adc:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     ae0:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     ae4:	40 7e       	andi	r20, 0xE0	; 224
     ae6:	97 70       	andi	r25, 0x07	; 7
     ae8:	94 2b       	or	r25, r20
     aea:	90 83       	st	Z, r25
			rx_frames[pos].array[1] = CANIDT1;
     aec:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     af0:	91 83       	std	Z+1, r25	; 0x01

			//read data registers - auto increment CANMSG
			rx_frames[pos].data[0] = CANMSG;
     af2:	aa ef       	ldi	r26, 0xFA	; 250
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	9c 91       	ld	r25, X
     af8:	93 83       	std	Z+3, r25	; 0x03
			rx_frames[pos].data[1] = CANMSG;
     afa:	9c 91       	ld	r25, X
     afc:	94 83       	std	Z+4, r25	; 0x04
			rx_frames[pos].data[2] = CANMSG;
     afe:	9c 91       	ld	r25, X
     b00:	95 83       	std	Z+5, r25	; 0x05
			rx_frames[pos].data[3] = CANMSG;
     b02:	9c 91       	ld	r25, X
     b04:	96 83       	std	Z+6, r25	; 0x06
			rx_frames[pos].data[4] = CANMSG;
     b06:	9c 91       	ld	r25, X
     b08:	97 83       	std	Z+7, r25	; 0x07
			rx_frames[pos].data[5] = CANMSG;
     b0a:	9c 91       	ld	r25, X
     b0c:	90 87       	std	Z+8, r25	; 0x08
			rx_frames[pos].data[6] = CANMSG;
     b0e:	9c 91       	ld	r25, X
     b10:	91 87       	std	Z+9, r25	; 0x09
			rx_frames[pos].data[7] = CANMSG;
     b12:	9c 91       	ld	r25, X
     b14:	92 87       	std	Z+10, r25	; 0x0a
			rx_on++;
     b16:	8f 5f       	subi	r24, 0xFF	; 255
     b18:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <rx_on>

			// Reset if reset can message
			if(rx_frames[pos].id == 0x000 && rx_frames[pos].data[0] == 0x03){
     b1c:	40 81       	ld	r20, Z
     b1e:	42 95       	swap	r20
     b20:	46 95       	lsr	r20
     b22:	47 70       	andi	r20, 0x07	; 7
     b24:	51 81       	ldd	r21, Z+1	; 0x01
     b26:	65 2f       	mov	r22, r21
     b28:	66 0f       	add	r22, r22
     b2a:	66 0f       	add	r22, r22
     b2c:	66 0f       	add	r22, r22
     b2e:	86 2f       	mov	r24, r22
     b30:	84 2b       	or	r24, r20
     b32:	95 2f       	mov	r25, r21
     b34:	92 95       	swap	r25
     b36:	96 95       	lsr	r25
     b38:	97 70       	andi	r25, 0x07	; 7
     b3a:	89 2b       	or	r24, r25
     b3c:	b1 f4       	brne	.+44     	; 0xb6a <__vector_18+0x1a2>
     b3e:	8b e0       	ldi	r24, 0x0B	; 11
     b40:	82 9f       	mul	r24, r18
     b42:	f0 01       	movw	r30, r0
     b44:	83 9f       	mul	r24, r19
     b46:	f0 0d       	add	r31, r0
     b48:	11 24       	eor	r1, r1
     b4a:	ea 59       	subi	r30, 0x9A	; 154
     b4c:	fe 4f       	sbci	r31, 0xFE	; 254
     b4e:	83 81       	ldd	r24, Z+3	; 0x03
     b50:	83 30       	cpi	r24, 0x03	; 3
     b52:	59 f4       	brne	.+22     	; 0xb6a <__vector_18+0x1a2>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     b54:	98 e0       	ldi	r25, 0x08	; 8
     b56:	88 e1       	ldi	r24, 0x18	; 24
     b58:	0f b6       	in	r0, 0x3f	; 63
     b5a:	f8 94       	cli
     b5c:	a8 95       	wdr
     b5e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     b62:	0f be       	out	0x3f, r0	; 63
     b64:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     b68:	ff cf       	rjmp	.-2      	; 0xb68 <__vector_18+0x1a0>
				while(1); //wait for watchdog
			}
		}

		// Clear irq
		mob_status = CANSTMOB;
     b6a:	ee ee       	ldi	r30, 0xEE	; 238
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	89 83       	std	Y+1, r24	; 0x01
		(void)mob_status;
     b72:	89 81       	ldd	r24, Y+1	; 0x01

		CANSTMOB &= ~(1 << RXOK);
     b74:	80 81       	ld	r24, Z
     b76:	8f 7d       	andi	r24, 0xDF	; 223
     b78:	80 83       	st	Z, r24
		CANCDMOB = (1 << CONMOB1);			//Set Mob 1 as RX
     b7a:	80 e8       	ldi	r24, 0x80	; 128
     b7c:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	}
}
     b80:	0f 90       	pop	r0
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	ff 91       	pop	r31
     b88:	ef 91       	pop	r30
     b8a:	bf 91       	pop	r27
     b8c:	af 91       	pop	r26
     b8e:	9f 91       	pop	r25
     b90:	8f 91       	pop	r24
     b92:	6f 91       	pop	r22
     b94:	5f 91       	pop	r21
     b96:	4f 91       	pop	r20
     b98:	3f 91       	pop	r19
     b9a:	2f 91       	pop	r18
     b9c:	0f 90       	pop	r0
     b9e:	0b be       	out	0x3b, r0	; 59
     ba0:	0f 90       	pop	r0
     ba2:	0f be       	out	0x3f, r0	; 63
     ba4:	0f 90       	pop	r0
     ba6:	1f 90       	pop	r1
     ba8:	18 95       	reti

00000baa <can_init>:


void can_init(uint16_t accept_mask_id, uint16_t accept_tag_id) {
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
	// Reset CAN controller
	CANGCON = (1 << SWRES);
     bae:	e8 ed       	ldi	r30, 0xD8	; 216
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	21 e0       	ldi	r18, 0x01	; 1
     bb4:	20 83       	st	Z, r18

	CANBT1 = (BRP_VALUE - 1) << 1;
     bb6:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = ((SJW_VALUE - 1) << 5) | ((PROP_SEG - 1) << 1);
     bba:	2c e0       	ldi	r18, 0x0C	; 12
     bbc:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = ((PHASE_SEG_2 - 1) << 4) | ((PHASE_SEG_1 - 1) << 1) | 1;
     bc0:	27 e3       	ldi	r18, 0x37	; 55
     bc2:	20 93 e4 00 	sts	0x00E4, r18	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	CANTIM = 0;
     bc6:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
     bca:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
	CANTTC = 0;
     bce:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     bd2:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	CANHPMOB = 0;
     bd6:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
	CANTCON = 0;
     bda:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

	// Switch to Mob 0 access
	CANPAGE = (0x0 << MOBNB0);
     bde:	cd ee       	ldi	r28, 0xED	; 237
     be0:	d0 e0       	ldi	r29, 0x00	; 0
     be2:	18 82       	st	Y, r1
	CANSTMOB = 0;
     be4:	ae ee       	ldi	r26, 0xEE	; 238
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	1c 92       	st	X, r1

	// Switch to Mob 1 access
	CANPAGE = (0x1 << MOBNB0);
     bea:	20 e1       	ldi	r18, 0x10	; 16
     bec:	28 83       	st	Y, r18
	CANSTMOB = 0;
     bee:	1c 92       	st	X, r1
	CANIDM4 = 0;
     bf0:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	CANIDM2 = (accept_mask_id << 5) & 0xFF;
     bf4:	28 2f       	mov	r18, r24
     bf6:	22 95       	swap	r18
     bf8:	22 0f       	add	r18, r18
     bfa:	20 7e       	andi	r18, 0xE0	; 224
     bfc:	20 93 f6 00 	sts	0x00F6, r18	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM1 = (accept_mask_id >> 3) & 0xFF;
     c00:	96 95       	lsr	r25
     c02:	87 95       	ror	r24
     c04:	96 95       	lsr	r25
     c06:	87 95       	ror	r24
     c08:	96 95       	lsr	r25
     c0a:	87 95       	ror	r24
     c0c:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	CANIDT4 = 0;
     c10:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT2 = (accept_tag_id << 5) & 0xFF;
     c14:	86 2f       	mov	r24, r22
     c16:	82 95       	swap	r24
     c18:	88 0f       	add	r24, r24
     c1a:	80 7e       	andi	r24, 0xE0	; 224
     c1c:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = (accept_tag_id >> 3) & 0xFF;
     c20:	76 95       	lsr	r23
     c22:	67 95       	ror	r22
     c24:	76 95       	lsr	r23
     c26:	67 95       	ror	r22
     c28:	76 95       	lsr	r23
     c2a:	67 95       	ror	r22
     c2c:	60 93 f3 00 	sts	0x00F3, r22	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

	// Set Mob 1 as RX
	CANCDMOB = (1 << CONMOB1);
     c30:	80 e8       	ldi	r24, 0x80	; 128
     c32:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	// Enable Mob 0 and 1
	CANEN2 = (1 << ENMOB1) | (1 << ENMOB0);
     c36:	83 e0       	ldi	r24, 0x03	; 3
     c38:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	// Enable Mob 0 and 1 Interrupt
	CANIE2 = (1 << ENMOB1) | (1 << ENMOB0);
     c3c:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	// Enable TX and RX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);	
     c40:	80 eb       	ldi	r24, 0xB0	; 176
     c42:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>

	// Enable CAN controller
	CANGCON = (1 << ENASTB);
     c46:	82 e0       	ldi	r24, 0x02	; 2
     c48:	80 83       	st	Z, r24

	reset = 0;
     c4a:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <reset>
}
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	08 95       	ret

00000c54 <can_read_message_if_new>:

bool can_read_message_if_new(CanMessage_t* message) {
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	ec 01       	movw	r28, r24
	// Check if there is a new message
	if (rx_on == rx_off) {
     c5a:	40 91 62 01 	lds	r20, 0x0162	; 0x800162 <rx_off>
     c5e:	20 91 61 01 	lds	r18, 0x0161	; 0x800161 <rx_on>
     c62:	24 17       	cp	r18, r20
     c64:	89 f1       	breq	.+98     	; 0xcc8 <can_read_message_if_new+0x74>
     c66:	a4 2f       	mov	r26, r20
     c68:	af 70       	andi	r26, 0x0F	; 15
	}

	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
     c6a:	8b e0       	ldi	r24, 0x0B	; 11
     c6c:	a8 9f       	mul	r26, r24
     c6e:	b0 01       	movw	r22, r0
     c70:	11 24       	eor	r1, r1
     c72:	fb 01       	movw	r30, r22
     c74:	ea 59       	subi	r30, 0x9A	; 154
     c76:	fe 4f       	sbci	r31, 0xFE	; 254
     c78:	20 81       	ld	r18, Z
     c7a:	22 95       	swap	r18
     c7c:	26 95       	lsr	r18
     c7e:	27 70       	andi	r18, 0x07	; 7
     c80:	31 81       	ldd	r19, Z+1	; 0x01
     c82:	53 2f       	mov	r21, r19
     c84:	55 0f       	add	r21, r21
     c86:	55 0f       	add	r21, r21
     c88:	55 0f       	add	r21, r21
     c8a:	25 2b       	or	r18, r21
     c8c:	32 95       	swap	r19
     c8e:	36 95       	lsr	r19
     c90:	37 70       	andi	r19, 0x07	; 7
     c92:	28 83       	st	Y, r18
     c94:	39 83       	std	Y+1, r19	; 0x01
	message->length = frame->length;
     c96:	fb 01       	movw	r30, r22
     c98:	e8 59       	subi	r30, 0x98	; 152
     c9a:	fe 4f       	sbci	r31, 0xFE	; 254
     c9c:	20 81       	ld	r18, Z
     c9e:	2f 70       	andi	r18, 0x0F	; 15
     ca0:	2a 83       	std	Y+2, r18	; 0x02
	for (int i = 0; i < message->length; i++) {
     ca2:	22 23       	and	r18, r18
     ca4:	99 f0       	breq	.+38     	; 0xccc <can_read_message_if_new+0x78>
     ca6:	db 01       	movw	r26, r22
     ca8:	a7 59       	subi	r26, 0x97	; 151
     caa:	be 4f       	sbci	r27, 0xFE	; 254
     cac:	fe 01       	movw	r30, r28
     cae:	33 96       	adiw	r30, 0x03	; 3
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	2d 5f       	subi	r18, 0xFD	; 253
     cb4:	3f 4f       	sbci	r19, 0xFF	; 255
     cb6:	ce 01       	movw	r24, r28
     cb8:	82 0f       	add	r24, r18
     cba:	93 1f       	adc	r25, r19
		message->data.u8[i] = frame->data[i];
     cbc:	2d 91       	ld	r18, X+
     cbe:	21 93       	st	Z+, r18
	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
	message->length = frame->length;
	for (int i = 0; i < message->length; i++) {
     cc0:	e8 17       	cp	r30, r24
     cc2:	f9 07       	cpc	r31, r25
     cc4:	d9 f7       	brne	.-10     	; 0xcbc <can_read_message_if_new+0x68>
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <can_read_message_if_new+0x78>
}

bool can_read_message_if_new(CanMessage_t* message) {
	// Check if there is a new message
	if (rx_on == rx_off) {
		return false;
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	04 c0       	rjmp	.+8      	; 0xcd4 <can_read_message_if_new+0x80>
		message->data.u8[i] = frame->data[i];
	}

	// Advance to next can message
	if (rx_on != rx_off) {
		rx_off++;
     ccc:	4f 5f       	subi	r20, 0xFF	; 255
     cce:	40 93 62 01 	sts	0x0162, r20	; 0x800162 <rx_off>
	}

	return true;
     cd2:	81 e0       	ldi	r24, 0x01	; 1
}
     cd4:	df 91       	pop	r29
     cd6:	cf 91       	pop	r28
     cd8:	08 95       	ret

00000cda <can_send_message>:

bool can_send_message(CanMessage_t* message) {
     cda:	cf 93       	push	r28
     cdc:	df 93       	push	r29
     cde:	fc 01       	movw	r30, r24
	bool result = false;

	CANGIE &= ~(1 << ENIT);
     ce0:	ab ed       	ldi	r26, 0xDB	; 219
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	8c 91       	ld	r24, X
     ce6:	8f 77       	andi	r24, 0x7F	; 127
     ce8:	8c 93       	st	X, r24

	if (!tx_busy) {
     cea:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <tx_busy>
     cee:	81 11       	cpse	r24, r1
     cf0:	27 c0       	rjmp	.+78     	; 0xd40 <can_send_message+0x66>
		// Switch to Mob 0 access
		CANPAGE = 0 << 4;
     cf2:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

		// Set ID
		CANIDT2 = message->id << 5;
     cf6:	80 81       	ld	r24, Z
     cf8:	82 95       	swap	r24
     cfa:	88 0f       	add	r24, r24
     cfc:	80 7e       	andi	r24, 0xE0	; 224
     cfe:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT1 = message->id >> 3;
     d02:	80 81       	ld	r24, Z
     d04:	91 81       	ldd	r25, Z+1	; 0x01
     d06:	96 95       	lsr	r25
     d08:	87 95       	ror	r24
     d0a:	96 95       	lsr	r25
     d0c:	87 95       	ror	r24
     d0e:	96 95       	lsr	r25
     d10:	87 95       	ror	r24
     d12:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     d16:	df 01       	movw	r26, r30
     d18:	13 96       	adiw	r26, 0x03	; 3
     d1a:	9f 01       	movw	r18, r30
     d1c:	25 5f       	subi	r18, 0xF5	; 245
     d1e:	3f 4f       	sbci	r19, 0xFF	; 255

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
     d20:	ca ef       	ldi	r28, 0xFA	; 250
     d22:	d0 e0       	ldi	r29, 0x00	; 0
     d24:	9d 91       	ld	r25, X+
     d26:	98 83       	st	Y, r25
		// Set ID
		CANIDT2 = message->id << 5;
		CANIDT1 = message->id >> 3;

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
     d28:	a2 17       	cp	r26, r18
     d2a:	b3 07       	cpc	r27, r19
     d2c:	d9 f7       	brne	.-10     	; 0xd24 <can_send_message+0x4a>
			CANMSG = message->data.u8[i];
		}
		
		result = true;
		tx_busy = 1;
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <tx_busy>

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
     d34:	82 81       	ldd	r24, Z+2	; 0x02
     d36:	80 64       	ori	r24, 0x40	; 64
     d38:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
		}
		
		result = true;
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	43 c0       	rjmp	.+134    	; 0xdc6 <can_send_message+0xec>
		tx_busy = 1;

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
	}
	else if (TX_SIZE - ((tx_on - tx_off) & TX_ABS_MASK)) {
     d40:	20 91 64 01 	lds	r18, 0x0164	; 0x800164 <tx_on>
     d44:	82 2f       	mov	r24, r18
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	30 91 65 01 	lds	r19, 0x0165	; 0x800165 <tx_off>
     d4c:	83 1b       	sub	r24, r19
     d4e:	91 09       	sbc	r25, r1
     d50:	8f 77       	andi	r24, 0x7F	; 127
     d52:	99 27       	eor	r25, r25
     d54:	40 97       	sbiw	r24, 0x10	; 16
     d56:	b1 f1       	breq	.+108    	; 0xdc4 <can_send_message+0xea>
		// Copy data into TX buffer
		tx_frames[tx_on & (TX_SIZE-1)].id = message->id;
     d58:	a2 2f       	mov	r26, r18
     d5a:	af 70       	andi	r26, 0x0F	; 15
     d5c:	8b e0       	ldi	r24, 0x0B	; 11
     d5e:	a8 9f       	mul	r26, r24
     d60:	d0 01       	movw	r26, r0
     d62:	11 24       	eor	r1, r1
     d64:	ed 01       	movw	r28, r26
     d66:	ca 5e       	subi	r28, 0xEA	; 234
     d68:	dd 4f       	sbci	r29, 0xFD	; 253
     d6a:	80 81       	ld	r24, Z
     d6c:	98 2f       	mov	r25, r24
     d6e:	92 95       	swap	r25
     d70:	99 0f       	add	r25, r25
     d72:	90 7e       	andi	r25, 0xE0	; 224
     d74:	88 81       	ld	r24, Y
     d76:	8f 71       	andi	r24, 0x1F	; 31
     d78:	89 2b       	or	r24, r25
     d7a:	88 83       	st	Y, r24
     d7c:	80 81       	ld	r24, Z
     d7e:	98 2f       	mov	r25, r24
     d80:	96 95       	lsr	r25
     d82:	96 95       	lsr	r25
     d84:	96 95       	lsr	r25
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	80 7e       	andi	r24, 0xE0	; 224
     d8a:	89 2b       	or	r24, r25
     d8c:	89 83       	std	Y+1, r24	; 0x01
     d8e:	91 81       	ldd	r25, Z+1	; 0x01
     d90:	92 95       	swap	r25
     d92:	99 0f       	add	r25, r25
     d94:	90 7e       	andi	r25, 0xE0	; 224
     d96:	8f 71       	andi	r24, 0x1F	; 31
     d98:	89 2b       	or	r24, r25
     d9a:	89 83       	std	Y+1, r24	; 0x01
		tx_frames[tx_on & (TX_SIZE-1)].length = message->length;
     d9c:	82 81       	ldd	r24, Z+2	; 0x02
     d9e:	98 2f       	mov	r25, r24
     da0:	9f 70       	andi	r25, 0x0F	; 15
     da2:	8a 81       	ldd	r24, Y+2	; 0x02
     da4:	80 7f       	andi	r24, 0xF0	; 240
     da6:	89 2b       	or	r24, r25
     da8:	8a 83       	std	Y+2, r24	; 0x02
		memcpy(tx_frames[tx_on & (TX_SIZE-1)].data, &message->data, CAN_FRAME_DATA_MAX_LENGTH);
     daa:	a7 5e       	subi	r26, 0xE7	; 231
     dac:	bd 4f       	sbci	r27, 0xFD	; 253
     dae:	33 96       	adiw	r30, 0x03	; 3
     db0:	88 e0       	ldi	r24, 0x08	; 8
     db2:	01 90       	ld	r0, Z+
     db4:	0d 92       	st	X+, r0
     db6:	8a 95       	dec	r24
     db8:	e1 f7       	brne	.-8      	; 0xdb2 <can_send_message+0xd8>

		/*for (int i = 0; i < 8; i++) {
			tx_frames[tx_on & (TX_SIZE-1)].data[i] = message->data.u8[i];
		}*/

		tx_on++;
     dba:	2f 5f       	subi	r18, 0xFF	; 255
     dbc:	20 93 64 01 	sts	0x0164, r18	; 0x800164 <tx_on>
		result = true;
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	01 c0       	rjmp	.+2      	; 0xdc6 <can_send_message+0xec>

	return true;
}

bool can_send_message(CanMessage_t* message) {
	bool result = false;
     dc4:	80 e0       	ldi	r24, 0x00	; 0

		tx_on++;
		result = true;
	}

	CANGIE |= (1 << ENIT);
     dc6:	eb ed       	ldi	r30, 0xDB	; 219
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	90 81       	ld	r25, Z
     dcc:	90 68       	ori	r25, 0x80	; 128
     dce:	90 83       	st	Z, r25

	return result;
     dd0:	df 91       	pop	r29
     dd2:	cf 91       	pop	r28
     dd4:	08 95       	ret

00000dd6 <__vector_15>:

volatile unsigned long T1_overflow_count = 0; 

//Interrupt Service Routine (ISR) for when Timer2's counter overflows; this will occur every 128us
ISR(TIMER1_OVF_vect) //Timer1's counter has overflowed
{
     dd6:	1f 92       	push	r1
     dd8:	0f 92       	push	r0
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	0f 92       	push	r0
     dde:	11 24       	eor	r1, r1
     de0:	8f 93       	push	r24
     de2:	9f 93       	push	r25
     de4:	af 93       	push	r26
     de6:	bf 93       	push	r27
	
	T1_overflow_count++; //increment the timer2 overflow counter
     de8:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <T1_overflow_count>
     dec:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <T1_overflow_count+0x1>
     df0:	a0 91 c8 02 	lds	r26, 0x02C8	; 0x8002c8 <T1_overflow_count+0x2>
     df4:	b0 91 c9 02 	lds	r27, 0x02C9	; 0x8002c9 <T1_overflow_count+0x3>
     df8:	01 96       	adiw	r24, 0x01	; 1
     dfa:	a1 1d       	adc	r26, r1
     dfc:	b1 1d       	adc	r27, r1
     dfe:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <T1_overflow_count>
     e02:	90 93 c7 02 	sts	0x02C7, r25	; 0x8002c7 <T1_overflow_count+0x1>
     e06:	a0 93 c8 02 	sts	0x02C8, r26	; 0x8002c8 <T1_overflow_count+0x2>
     e0a:	b0 93 c9 02 	sts	0x02C9, r27	; 0x8002c9 <T1_overflow_count+0x3>
}
     e0e:	bf 91       	pop	r27
     e10:	af 91       	pop	r26
     e12:	9f 91       	pop	r25
     e14:	8f 91       	pop	r24
     e16:	0f 90       	pop	r0
     e18:	0f be       	out	0x3f, r0	; 63
     e1a:	0f 90       	pop	r0
     e1c:	1f 90       	pop	r1
     e1e:	18 95       	reti

00000e20 <init_timer16>:

//Configure Timer1
void init_timer16()
{
	TCCR1A = 0;	//Normal mode, count to 0hFFFF
     e20:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	// set prescaler
	switch(TIMER1_PRESCALER){
		case 1:		TCCR1B |= 0b001; break;
		case 8:		TCCR1B |= 0b010; break;
     e24:	e1 e8       	ldi	r30, 0x81	; 129
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	82 60       	ori	r24, 0x02	; 2
     e2c:	80 83       	st	Z, r24
		case 64:	TCCR1B |= 0b011; break;
		case 256:	TCCR1B |= 0b100; break;
		case 1024:	TCCR1B |= 0b101; break;
	}
	//Enable Timer1 overflow interrupt
	TIMSK1 = 1<<TOIE1; //enable Timer2 overflow interrupt. (by making the right-most bit in TIMSK2 a 1)
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     e34:	08 95       	ret

00000e36 <get_T1_micros>:
}

//get the time in microseconds, as determined by Timer1; the precision will be 1 microseconds
unsigned long get_T1_micros()
{
	return T1_overflow_count*65536 + TCNT1;
     e36:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <T1_overflow_count>
     e3a:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <T1_overflow_count+0x1>
     e3e:	a0 91 c8 02 	lds	r26, 0x02C8	; 0x8002c8 <T1_overflow_count+0x2>
     e42:	b0 91 c9 02 	lds	r27, 0x02C9	; 0x8002c9 <T1_overflow_count+0x3>
     e46:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     e4a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     e4e:	dc 01       	movw	r26, r24
     e50:	99 27       	eor	r25, r25
     e52:	88 27       	eor	r24, r24
     e54:	bc 01       	movw	r22, r24
     e56:	cd 01       	movw	r24, r26
     e58:	62 0f       	add	r22, r18
     e5a:	73 1f       	adc	r23, r19
     e5c:	81 1d       	adc	r24, r1
     e5e:	91 1d       	adc	r25, r1
}
     e60:	08 95       	ret

00000e62 <reset_T1>:

//reset Timer1's counters. It is recommended to prohibit execution of interrupts during execution of this function
void reset_T1()
{
	T1_overflow_count = 0; //reset overflow counter
     e62:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <T1_overflow_count>
     e66:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <T1_overflow_count+0x1>
     e6a:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <T1_overflow_count+0x2>
     e6e:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <T1_overflow_count+0x3>
	TCNT1 = 0; //reset Timer1 counter
     e72:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     e76:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TIFR1 |= 0b1; //reset Timer1 overflow flag; see datasheet pg. 160; this prevents an immediate execution of Timer1's overflow ISR
     e7a:	b0 9a       	sbi	0x16, 0	; 22
     e7c:	08 95       	ret

00000e7e <rgbled_turn_off>:
	DDRB |= LED_ALL;
	rgbled_turn_off(LED_ALL);
}

void rgbled_turn_off(RgbLedColor_t color) {
	PORTB |= color;
     e7e:	95 b1       	in	r25, 0x05	; 5
     e80:	89 2b       	or	r24, r25
     e82:	85 b9       	out	0x05, r24	; 5
     e84:	08 95       	ret

00000e86 <rgbled_init>:
#include "rgbled.h"
#include <avr/io.h>


void rgbled_init() {
	DDRB |= LED_ALL;
     e86:	84 b1       	in	r24, 0x04	; 4
     e88:	80 6e       	ori	r24, 0xE0	; 224
     e8a:	84 b9       	out	0x04, r24	; 4
	rgbled_turn_off(LED_ALL);
     e8c:	80 ee       	ldi	r24, 0xE0	; 224
     e8e:	f7 cf       	rjmp	.-18     	; 0xe7e <rgbled_turn_off>
     e90:	08 95       	ret

00000e92 <rgbled_turn_on>:
void rgbled_turn_off(RgbLedColor_t color) {
	PORTB |= color;
}

void rgbled_turn_on(RgbLedColor_t color) {
	PORTB &= ~color;
     e92:	95 b1       	in	r25, 0x05	; 5
     e94:	80 95       	com	r24
     e96:	98 23       	and	r25, r24
     e98:	95 b9       	out	0x05, r25	; 5
     e9a:	08 95       	ret

00000e9c <rgbled_toggle>:
}

void rgbled_toggle(RgbLedColor_t color) {
	PORTB ^= color;
     e9c:	95 b1       	in	r25, 0x05	; 5
     e9e:	89 27       	eor	r24, r25
     ea0:	85 b9       	out	0x05, r24	; 5
     ea2:	08 95       	ret

00000ea4 <timer_init>:
static uint16_t cycle_count[NUMBER_OF_TASKS];	//current number of interrupt cycles
static uint16_t task_interval[NUMBER_OF_TASKS];	//number of interrupt cycles after which the task-flag is set

void timer_init() {
	// Configure timer with normal mode
	TCCR0A = 0;
     ea4:	14 bc       	out	0x24, r1	; 36
	// Enable overflow interrupt
	TIMSK0 = (1 << TOIE0);
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	// set prescaler
	switch(TIMER_PRESCALER){
		case 1:		TCCR0A |= 0b001; break;
		case 8:		TCCR0A |= 0b010; break;
		case 64:	TCCR0A |= 0b011; break;
     eac:	84 b5       	in	r24, 0x24	; 36
     eae:	83 60       	ori	r24, 0x03	; 3
     eb0:	84 bd       	out	0x24, r24	; 36
     eb2:	08 95       	ret

00000eb4 <timer_start>:
		case 256:	TCCR0A |= 0b100; break;
		case 1024:	TCCR0A |= 0b101; break;
	}
}

void timer_start(timer_t timer) {
     eb4:	8f 92       	push	r8
     eb6:	9f 92       	push	r9
     eb8:	af 92       	push	r10
     eba:	bf 92       	push	r11
     ebc:	cf 92       	push	r12
     ebe:	df 92       	push	r13
     ec0:	ef 92       	push	r14
     ec2:	ff 92       	push	r15
     ec4:	0f 93       	push	r16
     ec6:	1f 93       	push	r17
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
	elapsed_microseconds[timer] = -(1000000LL * TIMER_PRESCALER * TCNT0) / F_CPU ;
     ecc:	c8 2f       	mov	r28, r24
     ece:	d0 e0       	ldi	r29, 0x00	; 0
     ed0:	26 b5       	in	r18, 0x26	; 38
     ed2:	ce 01       	movw	r24, r28
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	88 0f       	add	r24, r24
     eda:	99 1f       	adc	r25, r25
     edc:	ac 01       	movw	r20, r24
     ede:	46 50       	subi	r20, 0x06	; 6
     ee0:	5d 4f       	sbci	r21, 0xFD	; 253
     ee2:	4a 01       	movw	r8, r20
     ee4:	a1 2c       	mov	r10, r1
     ee6:	0f 2e       	mov	r0, r31
     ee8:	f0 e7       	ldi	r31, 0x70	; 112
     eea:	bf 2e       	mov	r11, r31
     eec:	f0 2d       	mov	r31, r0
     eee:	0f 2e       	mov	r0, r31
     ef0:	ff e2       	ldi	r31, 0x2F	; 47
     ef2:	cf 2e       	mov	r12, r31
     ef4:	f0 2d       	mov	r31, r0
     ef6:	0f 2e       	mov	r0, r31
     ef8:	fc ef       	ldi	r31, 0xFC	; 252
     efa:	df 2e       	mov	r13, r31
     efc:	f0 2d       	mov	r31, r0
     efe:	ee 24       	eor	r14, r14
     f00:	ea 94       	dec	r14
     f02:	ff 24       	eor	r15, r15
     f04:	fa 94       	dec	r15
     f06:	0f ef       	ldi	r16, 0xFF	; 255
     f08:	1f ef       	ldi	r17, 0xFF	; 255
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	40 e0       	ldi	r20, 0x00	; 0
     f0e:	50 e0       	ldi	r21, 0x00	; 0
     f10:	60 e0       	ldi	r22, 0x00	; 0
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	0d d4       	rcall	.+2074   	; 0x1734 <__muldi3>
     f1a:	0f 2e       	mov	r0, r31
     f1c:	f2 e1       	ldi	r31, 0x12	; 18
     f1e:	bf 2e       	mov	r11, r31
     f20:	f0 2d       	mov	r31, r0
     f22:	0f 2e       	mov	r0, r31
     f24:	fa e7       	ldi	r31, 0x7A	; 122
     f26:	cf 2e       	mov	r12, r31
     f28:	f0 2d       	mov	r31, r0
     f2a:	d1 2c       	mov	r13, r1
     f2c:	e1 2c       	mov	r14, r1
     f2e:	f1 2c       	mov	r15, r1
     f30:	00 e0       	ldi	r16, 0x00	; 0
     f32:	10 e0       	ldi	r17, 0x00	; 0
     f34:	52 d4       	rcall	.+2212   	; 0x17da <__divdi3>
     f36:	f4 01       	movw	r30, r8
     f38:	20 83       	st	Z, r18
     f3a:	31 83       	std	Z+1, r19	; 0x01
     f3c:	42 83       	std	Z+2, r20	; 0x02
     f3e:	53 83       	std	Z+3, r21	; 0x03
	//elapsed_microseconds[timer] = 0;
	timer_enabled[timer] = true;
     f40:	c6 5e       	subi	r28, 0xE6	; 230
     f42:	dc 4f       	sbci	r29, 0xFC	; 252
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	88 83       	st	Y, r24
}
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	1f 91       	pop	r17
     f4e:	0f 91       	pop	r16
     f50:	ff 90       	pop	r15
     f52:	ef 90       	pop	r14
     f54:	df 90       	pop	r13
     f56:	cf 90       	pop	r12
     f58:	bf 90       	pop	r11
     f5a:	af 90       	pop	r10
     f5c:	9f 90       	pop	r9
     f5e:	8f 90       	pop	r8
     f60:	08 95       	ret

00000f62 <timer_stop>:

void timer_stop(timer_t timer) {
	timer_enabled[timer] = false;
     f62:	e8 2f       	mov	r30, r24
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	e6 5e       	subi	r30, 0xE6	; 230
     f68:	fc 4f       	sbci	r31, 0xFC	; 252
     f6a:	10 82       	st	Z, r1
     f6c:	08 95       	ret

00000f6e <timer_elapsed_ms>:
}

uint16_t timer_elapsed_ms(timer_t timer) {
     f6e:	4f 92       	push	r4
     f70:	5f 92       	push	r5
     f72:	6f 92       	push	r6
     f74:	7f 92       	push	r7
     f76:	af 92       	push	r10
     f78:	bf 92       	push	r11
     f7a:	cf 92       	push	r12
     f7c:	df 92       	push	r13
     f7e:	ef 92       	push	r14
     f80:	ff 92       	push	r15
     f82:	0f 93       	push	r16
     f84:	1f 93       	push	r17
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	00 d0       	rcall	.+0      	; 0xf8c <timer_elapsed_ms+0x1e>
     f8c:	00 d0       	rcall	.+0      	; 0xf8e <timer_elapsed_ms+0x20>
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
	return (elapsed_microseconds[timer] + (1000000LL * TIMER_PRESCALER * TCNT0) / F_CPU)/ 1000;
     f92:	26 b5       	in	r18, 0x26	; 38
     f94:	34 e0       	ldi	r19, 0x04	; 4
     f96:	83 9f       	mul	r24, r19
     f98:	c0 01       	movw	r24, r0
     f9a:	11 24       	eor	r1, r1
     f9c:	fc 01       	movw	r30, r24
     f9e:	e6 50       	subi	r30, 0x06	; 6
     fa0:	fd 4f       	sbci	r31, 0xFD	; 253
     fa2:	40 80       	ld	r4, Z
     fa4:	51 80       	ldd	r5, Z+1	; 0x01
     fa6:	62 80       	ldd	r6, Z+2	; 0x02
     fa8:	73 80       	ldd	r7, Z+3	; 0x03
     faa:	d3 01       	movw	r26, r6
     fac:	c2 01       	movw	r24, r4
     fae:	bb 0f       	add	r27, r27
     fb0:	88 0b       	sbc	r24, r24
     fb2:	98 2f       	mov	r25, r24
     fb4:	dc 01       	movw	r26, r24
     fb6:	89 83       	std	Y+1, r24	; 0x01
     fb8:	9a 83       	std	Y+2, r25	; 0x02
     fba:	ab 83       	std	Y+3, r26	; 0x03
     fbc:	bc 83       	std	Y+4, r27	; 0x04
     fbe:	a1 2c       	mov	r10, r1
     fc0:	0f 2e       	mov	r0, r31
     fc2:	f0 e9       	ldi	r31, 0x90	; 144
     fc4:	bf 2e       	mov	r11, r31
     fc6:	f0 2d       	mov	r31, r0
     fc8:	0f 2e       	mov	r0, r31
     fca:	f0 ed       	ldi	r31, 0xD0	; 208
     fcc:	cf 2e       	mov	r12, r31
     fce:	f0 2d       	mov	r31, r0
     fd0:	0f 2e       	mov	r0, r31
     fd2:	f3 e0       	ldi	r31, 0x03	; 3
     fd4:	df 2e       	mov	r13, r31
     fd6:	f0 2d       	mov	r31, r0
     fd8:	e1 2c       	mov	r14, r1
     fda:	f1 2c       	mov	r15, r1
     fdc:	00 e0       	ldi	r16, 0x00	; 0
     fde:	10 e0       	ldi	r17, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e0       	ldi	r20, 0x00	; 0
     fe4:	50 e0       	ldi	r21, 0x00	; 0
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	a2 d3       	rcall	.+1860   	; 0x1734 <__muldi3>
     ff0:	0f 2e       	mov	r0, r31
     ff2:	f2 e1       	ldi	r31, 0x12	; 18
     ff4:	bf 2e       	mov	r11, r31
     ff6:	f0 2d       	mov	r31, r0
     ff8:	0f 2e       	mov	r0, r31
     ffa:	fa e7       	ldi	r31, 0x7A	; 122
     ffc:	cf 2e       	mov	r12, r31
     ffe:	f0 2d       	mov	r31, r0
    1000:	d1 2c       	mov	r13, r1
    1002:	eb d3       	rcall	.+2006   	; 0x17da <__divdi3>
    1004:	a2 2e       	mov	r10, r18
    1006:	b3 2e       	mov	r11, r19
    1008:	c4 2e       	mov	r12, r20
    100a:	d5 2e       	mov	r13, r21
    100c:	e6 2e       	mov	r14, r22
    100e:	f7 2e       	mov	r15, r23
    1010:	08 2f       	mov	r16, r24
    1012:	19 2f       	mov	r17, r25
    1014:	24 2d       	mov	r18, r4
    1016:	35 2d       	mov	r19, r5
    1018:	46 2d       	mov	r20, r6
    101a:	57 2d       	mov	r21, r7
    101c:	69 81       	ldd	r22, Y+1	; 0x01
    101e:	76 2f       	mov	r23, r22
    1020:	86 2f       	mov	r24, r22
    1022:	96 2f       	mov	r25, r22
    1024:	a8 d4       	rcall	.+2384   	; 0x1976 <__adddi3>
    1026:	0f 2e       	mov	r0, r31
    1028:	f8 ee       	ldi	r31, 0xE8	; 232
    102a:	af 2e       	mov	r10, r31
    102c:	f0 2d       	mov	r31, r0
    102e:	0f 2e       	mov	r0, r31
    1030:	f3 e0       	ldi	r31, 0x03	; 3
    1032:	bf 2e       	mov	r11, r31
    1034:	f0 2d       	mov	r31, r0
    1036:	c1 2c       	mov	r12, r1
    1038:	d1 2c       	mov	r13, r1
    103a:	e1 2c       	mov	r14, r1
    103c:	f1 2c       	mov	r15, r1
    103e:	00 e0       	ldi	r16, 0x00	; 0
    1040:	10 e0       	ldi	r17, 0x00	; 0
    1042:	cb d3       	rcall	.+1942   	; 0x17da <__divdi3>
    1044:	82 2f       	mov	r24, r18
    1046:	93 2f       	mov	r25, r19
	//return elapsed_microseconds[timer]/1000;
}
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	df 91       	pop	r29
    1052:	cf 91       	pop	r28
    1054:	1f 91       	pop	r17
    1056:	0f 91       	pop	r16
    1058:	ff 90       	pop	r15
    105a:	ef 90       	pop	r14
    105c:	df 90       	pop	r13
    105e:	cf 90       	pop	r12
    1060:	bf 90       	pop	r11
    1062:	af 90       	pop	r10
    1064:	7f 90       	pop	r7
    1066:	6f 90       	pop	r6
    1068:	5f 90       	pop	r5
    106a:	4f 90       	pop	r4
    106c:	08 95       	ret

0000106e <timer_elapsed_us>:

uint32_t timer_elapsed_us(timer_t timer) {
    106e:	8f 92       	push	r8
    1070:	9f 92       	push	r9
    1072:	af 92       	push	r10
    1074:	bf 92       	push	r11
    1076:	cf 92       	push	r12
    1078:	df 92       	push	r13
    107a:	ef 92       	push	r14
    107c:	ff 92       	push	r15
    107e:	0f 93       	push	r16
    1080:	1f 93       	push	r17
    1082:	cf 93       	push	r28
    1084:	df 93       	push	r29
	return (elapsed_microseconds[timer] + (1000000LL * TIMER_PRESCALER * TCNT0) / F_CPU);
    1086:	26 b5       	in	r18, 0x26	; 38
    1088:	34 e0       	ldi	r19, 0x04	; 4
    108a:	83 9f       	mul	r24, r19
    108c:	c0 01       	movw	r24, r0
    108e:	11 24       	eor	r1, r1
    1090:	ec 01       	movw	r28, r24
    1092:	c6 50       	subi	r28, 0x06	; 6
    1094:	dd 4f       	sbci	r29, 0xFD	; 253
    1096:	a1 2c       	mov	r10, r1
    1098:	0f 2e       	mov	r0, r31
    109a:	f0 e9       	ldi	r31, 0x90	; 144
    109c:	bf 2e       	mov	r11, r31
    109e:	f0 2d       	mov	r31, r0
    10a0:	0f 2e       	mov	r0, r31
    10a2:	f0 ed       	ldi	r31, 0xD0	; 208
    10a4:	cf 2e       	mov	r12, r31
    10a6:	f0 2d       	mov	r31, r0
    10a8:	0f 2e       	mov	r0, r31
    10aa:	f3 e0       	ldi	r31, 0x03	; 3
    10ac:	df 2e       	mov	r13, r31
    10ae:	f0 2d       	mov	r31, r0
    10b0:	e1 2c       	mov	r14, r1
    10b2:	f1 2c       	mov	r15, r1
    10b4:	00 e0       	ldi	r16, 0x00	; 0
    10b6:	10 e0       	ldi	r17, 0x00	; 0
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	40 e0       	ldi	r20, 0x00	; 0
    10bc:	50 e0       	ldi	r21, 0x00	; 0
    10be:	60 e0       	ldi	r22, 0x00	; 0
    10c0:	70 e0       	ldi	r23, 0x00	; 0
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	36 d3       	rcall	.+1644   	; 0x1734 <__muldi3>
    10c8:	0f 2e       	mov	r0, r31
    10ca:	f2 e1       	ldi	r31, 0x12	; 18
    10cc:	bf 2e       	mov	r11, r31
    10ce:	f0 2d       	mov	r31, r0
    10d0:	0f 2e       	mov	r0, r31
    10d2:	fa e7       	ldi	r31, 0x7A	; 122
    10d4:	cf 2e       	mov	r12, r31
    10d6:	f0 2d       	mov	r31, r0
    10d8:	d1 2c       	mov	r13, r1
    10da:	7f d3       	rcall	.+1790   	; 0x17da <__divdi3>
    10dc:	82 2e       	mov	r8, r18
    10de:	93 2e       	mov	r9, r19
    10e0:	a4 2e       	mov	r10, r20
    10e2:	b5 2e       	mov	r11, r21
    10e4:	88 81       	ld	r24, Y
    10e6:	99 81       	ldd	r25, Y+1	; 0x01
    10e8:	aa 81       	ldd	r26, Y+2	; 0x02
    10ea:	bb 81       	ldd	r27, Y+3	; 0x03
    10ec:	bc 01       	movw	r22, r24
    10ee:	cd 01       	movw	r24, r26
    10f0:	68 0d       	add	r22, r8
    10f2:	79 1d       	adc	r23, r9
    10f4:	8a 1d       	adc	r24, r10
    10f6:	9b 1d       	adc	r25, r11
	//return elapsed_microseconds[timer];
}
    10f8:	df 91       	pop	r29
    10fa:	cf 91       	pop	r28
    10fc:	1f 91       	pop	r17
    10fe:	0f 91       	pop	r16
    1100:	ff 90       	pop	r15
    1102:	ef 90       	pop	r14
    1104:	df 90       	pop	r13
    1106:	cf 90       	pop	r12
    1108:	bf 90       	pop	r11
    110a:	af 90       	pop	r10
    110c:	9f 90       	pop	r9
    110e:	8f 90       	pop	r8
    1110:	08 95       	ret

00001112 <task_start>:

//Start a task with the designator task and a task interval of ti
void task_start(uint8_t task, uint16_t ti){
	task_interval[task] = ti;
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	9c 01       	movw	r18, r24
    1116:	22 0f       	add	r18, r18
    1118:	33 1f       	adc	r19, r19
    111a:	f9 01       	movw	r30, r18
    111c:	e6 53       	subi	r30, 0x36	; 54
    111e:	fd 4f       	sbci	r31, 0xFD	; 253
    1120:	71 83       	std	Z+1, r23	; 0x01
    1122:	60 83       	st	Z, r22
	task_enabled[task] = true;
    1124:	fc 01       	movw	r30, r24
    1126:	ee 50       	subi	r30, 0x0E	; 14
    1128:	fd 4f       	sbci	r31, 0xFD	; 253
    112a:	41 e0       	ldi	r20, 0x01	; 1
    112c:	40 83       	st	Z, r20
	cycle_count[task] = 0;
    112e:	f9 01       	movw	r30, r18
    1130:	e6 52       	subi	r30, 0x26	; 38
    1132:	fd 4f       	sbci	r31, 0xFD	; 253
    1134:	11 82       	std	Z+1, r1	; 0x01
    1136:	10 82       	st	Z, r1
    1138:	08 95       	ret

0000113a <task_stop>:
}

void task_stop(uint8_t task){
	task_enabled[task] = false;
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	fc 01       	movw	r30, r24
    113e:	ee 50       	subi	r30, 0x0E	; 14
    1140:	fd 4f       	sbci	r31, 0xFD	; 253
    1142:	10 82       	st	Z, r1
	cycle_count[task] = 0;
    1144:	88 0f       	add	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	fc 01       	movw	r30, r24
    114a:	e6 52       	subi	r30, 0x26	; 38
    114c:	fd 4f       	sbci	r31, 0xFD	; 253
    114e:	11 82       	std	Z+1, r1	; 0x01
    1150:	10 82       	st	Z, r1
    1152:	08 95       	ret

00001154 <task_is_due>:
}

bool task_is_due(uint8_t task){
	return task_flag[task];
    1154:	e8 2f       	mov	r30, r24
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	e6 51       	subi	r30, 0x16	; 22
    115a:	fd 4f       	sbci	r31, 0xFD	; 253
}
    115c:	80 81       	ld	r24, Z
    115e:	08 95       	ret

00001160 <task_is_done>:

void task_is_done(uint8_t task){
	task_flag[task] = 0;
    1160:	e8 2f       	mov	r30, r24
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	e6 51       	subi	r30, 0x16	; 22
    1166:	fd 4f       	sbci	r31, 0xFD	; 253
    1168:	10 82       	st	Z, r1
    116a:	08 95       	ret

0000116c <__vector_17>:
}

ISR(TIMER0_OVF_vect) {
    116c:	1f 92       	push	r1
    116e:	0f 92       	push	r0
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	0f 92       	push	r0
    1174:	11 24       	eor	r1, r1
    1176:	0b b6       	in	r0, 0x3b	; 59
    1178:	0f 92       	push	r0
    117a:	ef 92       	push	r14
    117c:	ff 92       	push	r15
    117e:	1f 93       	push	r17
    1180:	2f 93       	push	r18
    1182:	3f 93       	push	r19
    1184:	4f 93       	push	r20
    1186:	5f 93       	push	r21
    1188:	6f 93       	push	r22
    118a:	7f 93       	push	r23
    118c:	8f 93       	push	r24
    118e:	9f 93       	push	r25
    1190:	af 93       	push	r26
    1192:	bf 93       	push	r27
    1194:	cf 93       	push	r28
    1196:	df 93       	push	r29
    1198:	ef 93       	push	r30
    119a:	ff 93       	push	r31
    119c:	a2 ef       	ldi	r26, 0xF2	; 242
    119e:	b2 e0       	ldi	r27, 0x02	; 2
    11a0:	ea ed       	ldi	r30, 0xDA	; 218
    11a2:	f2 e0       	ldi	r31, 0x02	; 2
    11a4:	0f 2e       	mov	r0, r31
    11a6:	fa ec       	ldi	r31, 0xCA	; 202
    11a8:	ef 2e       	mov	r14, r31
    11aa:	f2 e0       	ldi	r31, 0x02	; 2
    11ac:	ff 2e       	mov	r15, r31
    11ae:	f0 2d       	mov	r31, r0
    11b0:	2a ee       	ldi	r18, 0xEA	; 234
    11b2:	32 e0       	ldi	r19, 0x02	; 2
    11b4:	4a ef       	ldi	r20, 0xFA	; 250
    11b6:	52 e0       	ldi	r21, 0x02	; 2
	for (int t = 0; t < NUMBER_OF_TASKS; t++) {
		if (task_enabled[t]){
			cycle_count[t]++;
			if(cycle_count[t] == task_interval[t])	{
				cycle_count[t] = 0;
				task_flag[t] = true;
    11b8:	11 e0       	ldi	r17, 0x01	; 1
	task_flag[task] = 0;
}

ISR(TIMER0_OVF_vect) {
	for (int t = 0; t < NUMBER_OF_TASKS; t++) {
		if (task_enabled[t]){
    11ba:	8d 91       	ld	r24, X+
    11bc:	88 23       	and	r24, r24
    11be:	79 f0       	breq	.+30     	; 0x11de <__vector_17+0x72>
			cycle_count[t]++;
    11c0:	80 81       	ld	r24, Z
    11c2:	91 81       	ldd	r25, Z+1	; 0x01
    11c4:	01 96       	adiw	r24, 0x01	; 1
    11c6:	91 83       	std	Z+1, r25	; 0x01
    11c8:	80 83       	st	Z, r24
			if(cycle_count[t] == task_interval[t])	{
    11ca:	e7 01       	movw	r28, r14
    11cc:	68 81       	ld	r22, Y
    11ce:	79 81       	ldd	r23, Y+1	; 0x01
    11d0:	86 17       	cp	r24, r22
    11d2:	97 07       	cpc	r25, r23
    11d4:	21 f4       	brne	.+8      	; 0x11de <__vector_17+0x72>
				cycle_count[t] = 0;
    11d6:	11 82       	std	Z+1, r1	; 0x01
    11d8:	10 82       	st	Z, r1
				task_flag[t] = true;
    11da:	e9 01       	movw	r28, r18
    11dc:	18 83       	st	Y, r17
    11de:	32 96       	adiw	r30, 0x02	; 2
    11e0:	d2 e0       	ldi	r29, 0x02	; 2
    11e2:	ed 0e       	add	r14, r29
    11e4:	f1 1c       	adc	r15, r1
    11e6:	2f 5f       	subi	r18, 0xFF	; 255
    11e8:	3f 4f       	sbci	r19, 0xFF	; 255
void task_is_done(uint8_t task){
	task_flag[task] = 0;
}

ISR(TIMER0_OVF_vect) {
	for (int t = 0; t < NUMBER_OF_TASKS; t++) {
    11ea:	a4 17       	cp	r26, r20
    11ec:	b5 07       	cpc	r27, r21
    11ee:	29 f7       	brne	.-54     	; 0x11ba <__vector_17+0x4e>
    11f0:	aa e1       	ldi	r26, 0x1A	; 26
    11f2:	b3 e0       	ldi	r27, 0x03	; 3
    11f4:	ea ef       	ldi	r30, 0xFA	; 250
    11f6:	f2 e0       	ldi	r31, 0x02	; 2
    11f8:	2a e1       	ldi	r18, 0x1A	; 26
    11fa:	33 e0       	ldi	r19, 0x03	; 3
			}
		}
	}
		
	for (int t = 0; t < NUMBER_OF_TIMERS; t++) {
		if (timer_enabled[t]){
    11fc:	8d 91       	ld	r24, X+
    11fe:	88 23       	and	r24, r24
    1200:	59 f0       	breq	.+22     	; 0x1218 <__vector_17+0xac>
			elapsed_microseconds[t] += (1000000ULL * TIMER_PRESCALER * 256) / F_CPU;
    1202:	40 81       	ld	r20, Z
    1204:	51 81       	ldd	r21, Z+1	; 0x01
    1206:	62 81       	ldd	r22, Z+2	; 0x02
    1208:	73 81       	ldd	r23, Z+3	; 0x03
    120a:	58 5f       	subi	r21, 0xF8	; 248
    120c:	6f 4f       	sbci	r22, 0xFF	; 255
    120e:	7f 4f       	sbci	r23, 0xFF	; 255
    1210:	40 83       	st	Z, r20
    1212:	51 83       	std	Z+1, r21	; 0x01
    1214:	62 83       	std	Z+2, r22	; 0x02
    1216:	73 83       	std	Z+3, r23	; 0x03
    1218:	34 96       	adiw	r30, 0x04	; 4
				task_flag[t] = true;
			}
		}
	}
		
	for (int t = 0; t < NUMBER_OF_TIMERS; t++) {
    121a:	e2 17       	cp	r30, r18
    121c:	f3 07       	cpc	r31, r19
    121e:	71 f7       	brne	.-36     	; 0x11fc <__vector_17+0x90>
		if (timer_enabled[t]){
			elapsed_microseconds[t] += (1000000ULL * TIMER_PRESCALER * 256) / F_CPU;
		}
	}
}
    1220:	ff 91       	pop	r31
    1222:	ef 91       	pop	r30
    1224:	df 91       	pop	r29
    1226:	cf 91       	pop	r28
    1228:	bf 91       	pop	r27
    122a:	af 91       	pop	r26
    122c:	9f 91       	pop	r25
    122e:	8f 91       	pop	r24
    1230:	7f 91       	pop	r23
    1232:	6f 91       	pop	r22
    1234:	5f 91       	pop	r21
    1236:	4f 91       	pop	r20
    1238:	3f 91       	pop	r19
    123a:	2f 91       	pop	r18
    123c:	1f 91       	pop	r17
    123e:	ff 90       	pop	r15
    1240:	ef 90       	pop	r14
    1242:	0f 90       	pop	r0
    1244:	0b be       	out	0x3b, r0	; 59
    1246:	0f 90       	pop	r0
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	0f 90       	pop	r0
    124c:	1f 90       	pop	r1
    124e:	18 95       	reti

00001250 <__subsf3>:
    1250:	50 58       	subi	r21, 0x80	; 128

00001252 <__addsf3>:
    1252:	bb 27       	eor	r27, r27
    1254:	aa 27       	eor	r26, r26
    1256:	0e d0       	rcall	.+28     	; 0x1274 <__addsf3x>
    1258:	4d c1       	rjmp	.+666    	; 0x14f4 <__fp_round>
    125a:	3e d1       	rcall	.+636    	; 0x14d8 <__fp_pscA>
    125c:	30 f0       	brcs	.+12     	; 0x126a <__addsf3+0x18>
    125e:	43 d1       	rcall	.+646    	; 0x14e6 <__fp_pscB>
    1260:	20 f0       	brcs	.+8      	; 0x126a <__addsf3+0x18>
    1262:	31 f4       	brne	.+12     	; 0x1270 <__addsf3+0x1e>
    1264:	9f 3f       	cpi	r25, 0xFF	; 255
    1266:	11 f4       	brne	.+4      	; 0x126c <__addsf3+0x1a>
    1268:	1e f4       	brtc	.+6      	; 0x1270 <__addsf3+0x1e>
    126a:	33 c1       	rjmp	.+614    	; 0x14d2 <__fp_nan>
    126c:	0e f4       	brtc	.+2      	; 0x1270 <__addsf3+0x1e>
    126e:	e0 95       	com	r30
    1270:	e7 fb       	bst	r30, 7
    1272:	29 c1       	rjmp	.+594    	; 0x14c6 <__fp_inf>

00001274 <__addsf3x>:
    1274:	e9 2f       	mov	r30, r25
    1276:	4f d1       	rcall	.+670    	; 0x1516 <__fp_split3>
    1278:	80 f3       	brcs	.-32     	; 0x125a <__addsf3+0x8>
    127a:	ba 17       	cp	r27, r26
    127c:	62 07       	cpc	r22, r18
    127e:	73 07       	cpc	r23, r19
    1280:	84 07       	cpc	r24, r20
    1282:	95 07       	cpc	r25, r21
    1284:	18 f0       	brcs	.+6      	; 0x128c <__addsf3x+0x18>
    1286:	71 f4       	brne	.+28     	; 0x12a4 <__addsf3x+0x30>
    1288:	9e f5       	brtc	.+102    	; 0x12f0 <__addsf3x+0x7c>
    128a:	67 c1       	rjmp	.+718    	; 0x155a <__fp_zero>
    128c:	0e f4       	brtc	.+2      	; 0x1290 <__addsf3x+0x1c>
    128e:	e0 95       	com	r30
    1290:	0b 2e       	mov	r0, r27
    1292:	ba 2f       	mov	r27, r26
    1294:	a0 2d       	mov	r26, r0
    1296:	0b 01       	movw	r0, r22
    1298:	b9 01       	movw	r22, r18
    129a:	90 01       	movw	r18, r0
    129c:	0c 01       	movw	r0, r24
    129e:	ca 01       	movw	r24, r20
    12a0:	a0 01       	movw	r20, r0
    12a2:	11 24       	eor	r1, r1
    12a4:	ff 27       	eor	r31, r31
    12a6:	59 1b       	sub	r21, r25
    12a8:	99 f0       	breq	.+38     	; 0x12d0 <__addsf3x+0x5c>
    12aa:	59 3f       	cpi	r21, 0xF9	; 249
    12ac:	50 f4       	brcc	.+20     	; 0x12c2 <__addsf3x+0x4e>
    12ae:	50 3e       	cpi	r21, 0xE0	; 224
    12b0:	68 f1       	brcs	.+90     	; 0x130c <__addsf3x+0x98>
    12b2:	1a 16       	cp	r1, r26
    12b4:	f0 40       	sbci	r31, 0x00	; 0
    12b6:	a2 2f       	mov	r26, r18
    12b8:	23 2f       	mov	r18, r19
    12ba:	34 2f       	mov	r19, r20
    12bc:	44 27       	eor	r20, r20
    12be:	58 5f       	subi	r21, 0xF8	; 248
    12c0:	f3 cf       	rjmp	.-26     	; 0x12a8 <__addsf3x+0x34>
    12c2:	46 95       	lsr	r20
    12c4:	37 95       	ror	r19
    12c6:	27 95       	ror	r18
    12c8:	a7 95       	ror	r26
    12ca:	f0 40       	sbci	r31, 0x00	; 0
    12cc:	53 95       	inc	r21
    12ce:	c9 f7       	brne	.-14     	; 0x12c2 <__addsf3x+0x4e>
    12d0:	7e f4       	brtc	.+30     	; 0x12f0 <__addsf3x+0x7c>
    12d2:	1f 16       	cp	r1, r31
    12d4:	ba 0b       	sbc	r27, r26
    12d6:	62 0b       	sbc	r22, r18
    12d8:	73 0b       	sbc	r23, r19
    12da:	84 0b       	sbc	r24, r20
    12dc:	ba f0       	brmi	.+46     	; 0x130c <__addsf3x+0x98>
    12de:	91 50       	subi	r25, 0x01	; 1
    12e0:	a1 f0       	breq	.+40     	; 0x130a <__addsf3x+0x96>
    12e2:	ff 0f       	add	r31, r31
    12e4:	bb 1f       	adc	r27, r27
    12e6:	66 1f       	adc	r22, r22
    12e8:	77 1f       	adc	r23, r23
    12ea:	88 1f       	adc	r24, r24
    12ec:	c2 f7       	brpl	.-16     	; 0x12de <__addsf3x+0x6a>
    12ee:	0e c0       	rjmp	.+28     	; 0x130c <__addsf3x+0x98>
    12f0:	ba 0f       	add	r27, r26
    12f2:	62 1f       	adc	r22, r18
    12f4:	73 1f       	adc	r23, r19
    12f6:	84 1f       	adc	r24, r20
    12f8:	48 f4       	brcc	.+18     	; 0x130c <__addsf3x+0x98>
    12fa:	87 95       	ror	r24
    12fc:	77 95       	ror	r23
    12fe:	67 95       	ror	r22
    1300:	b7 95       	ror	r27
    1302:	f7 95       	ror	r31
    1304:	9e 3f       	cpi	r25, 0xFE	; 254
    1306:	08 f0       	brcs	.+2      	; 0x130a <__addsf3x+0x96>
    1308:	b3 cf       	rjmp	.-154    	; 0x1270 <__addsf3+0x1e>
    130a:	93 95       	inc	r25
    130c:	88 0f       	add	r24, r24
    130e:	08 f0       	brcs	.+2      	; 0x1312 <__addsf3x+0x9e>
    1310:	99 27       	eor	r25, r25
    1312:	ee 0f       	add	r30, r30
    1314:	97 95       	ror	r25
    1316:	87 95       	ror	r24
    1318:	08 95       	ret

0000131a <__divsf3>:
    131a:	0c d0       	rcall	.+24     	; 0x1334 <__divsf3x>
    131c:	eb c0       	rjmp	.+470    	; 0x14f4 <__fp_round>
    131e:	e3 d0       	rcall	.+454    	; 0x14e6 <__fp_pscB>
    1320:	40 f0       	brcs	.+16     	; 0x1332 <__divsf3+0x18>
    1322:	da d0       	rcall	.+436    	; 0x14d8 <__fp_pscA>
    1324:	30 f0       	brcs	.+12     	; 0x1332 <__divsf3+0x18>
    1326:	21 f4       	brne	.+8      	; 0x1330 <__divsf3+0x16>
    1328:	5f 3f       	cpi	r21, 0xFF	; 255
    132a:	19 f0       	breq	.+6      	; 0x1332 <__divsf3+0x18>
    132c:	cc c0       	rjmp	.+408    	; 0x14c6 <__fp_inf>
    132e:	51 11       	cpse	r21, r1
    1330:	15 c1       	rjmp	.+554    	; 0x155c <__fp_szero>
    1332:	cf c0       	rjmp	.+414    	; 0x14d2 <__fp_nan>

00001334 <__divsf3x>:
    1334:	f0 d0       	rcall	.+480    	; 0x1516 <__fp_split3>
    1336:	98 f3       	brcs	.-26     	; 0x131e <__divsf3+0x4>

00001338 <__divsf3_pse>:
    1338:	99 23       	and	r25, r25
    133a:	c9 f3       	breq	.-14     	; 0x132e <__divsf3+0x14>
    133c:	55 23       	and	r21, r21
    133e:	b1 f3       	breq	.-20     	; 0x132c <__divsf3+0x12>
    1340:	95 1b       	sub	r25, r21
    1342:	55 0b       	sbc	r21, r21
    1344:	bb 27       	eor	r27, r27
    1346:	aa 27       	eor	r26, r26
    1348:	62 17       	cp	r22, r18
    134a:	73 07       	cpc	r23, r19
    134c:	84 07       	cpc	r24, r20
    134e:	38 f0       	brcs	.+14     	; 0x135e <__divsf3_pse+0x26>
    1350:	9f 5f       	subi	r25, 0xFF	; 255
    1352:	5f 4f       	sbci	r21, 0xFF	; 255
    1354:	22 0f       	add	r18, r18
    1356:	33 1f       	adc	r19, r19
    1358:	44 1f       	adc	r20, r20
    135a:	aa 1f       	adc	r26, r26
    135c:	a9 f3       	breq	.-22     	; 0x1348 <__divsf3_pse+0x10>
    135e:	33 d0       	rcall	.+102    	; 0x13c6 <__divsf3_pse+0x8e>
    1360:	0e 2e       	mov	r0, r30
    1362:	3a f0       	brmi	.+14     	; 0x1372 <__divsf3_pse+0x3a>
    1364:	e0 e8       	ldi	r30, 0x80	; 128
    1366:	30 d0       	rcall	.+96     	; 0x13c8 <__divsf3_pse+0x90>
    1368:	91 50       	subi	r25, 0x01	; 1
    136a:	50 40       	sbci	r21, 0x00	; 0
    136c:	e6 95       	lsr	r30
    136e:	00 1c       	adc	r0, r0
    1370:	ca f7       	brpl	.-14     	; 0x1364 <__divsf3_pse+0x2c>
    1372:	29 d0       	rcall	.+82     	; 0x13c6 <__divsf3_pse+0x8e>
    1374:	fe 2f       	mov	r31, r30
    1376:	27 d0       	rcall	.+78     	; 0x13c6 <__divsf3_pse+0x8e>
    1378:	66 0f       	add	r22, r22
    137a:	77 1f       	adc	r23, r23
    137c:	88 1f       	adc	r24, r24
    137e:	bb 1f       	adc	r27, r27
    1380:	26 17       	cp	r18, r22
    1382:	37 07       	cpc	r19, r23
    1384:	48 07       	cpc	r20, r24
    1386:	ab 07       	cpc	r26, r27
    1388:	b0 e8       	ldi	r27, 0x80	; 128
    138a:	09 f0       	breq	.+2      	; 0x138e <__divsf3_pse+0x56>
    138c:	bb 0b       	sbc	r27, r27
    138e:	80 2d       	mov	r24, r0
    1390:	bf 01       	movw	r22, r30
    1392:	ff 27       	eor	r31, r31
    1394:	93 58       	subi	r25, 0x83	; 131
    1396:	5f 4f       	sbci	r21, 0xFF	; 255
    1398:	2a f0       	brmi	.+10     	; 0x13a4 <__divsf3_pse+0x6c>
    139a:	9e 3f       	cpi	r25, 0xFE	; 254
    139c:	51 05       	cpc	r21, r1
    139e:	68 f0       	brcs	.+26     	; 0x13ba <__divsf3_pse+0x82>
    13a0:	92 c0       	rjmp	.+292    	; 0x14c6 <__fp_inf>
    13a2:	dc c0       	rjmp	.+440    	; 0x155c <__fp_szero>
    13a4:	5f 3f       	cpi	r21, 0xFF	; 255
    13a6:	ec f3       	brlt	.-6      	; 0x13a2 <__divsf3_pse+0x6a>
    13a8:	98 3e       	cpi	r25, 0xE8	; 232
    13aa:	dc f3       	brlt	.-10     	; 0x13a2 <__divsf3_pse+0x6a>
    13ac:	86 95       	lsr	r24
    13ae:	77 95       	ror	r23
    13b0:	67 95       	ror	r22
    13b2:	b7 95       	ror	r27
    13b4:	f7 95       	ror	r31
    13b6:	9f 5f       	subi	r25, 0xFF	; 255
    13b8:	c9 f7       	brne	.-14     	; 0x13ac <__divsf3_pse+0x74>
    13ba:	88 0f       	add	r24, r24
    13bc:	91 1d       	adc	r25, r1
    13be:	96 95       	lsr	r25
    13c0:	87 95       	ror	r24
    13c2:	97 f9       	bld	r25, 7
    13c4:	08 95       	ret
    13c6:	e1 e0       	ldi	r30, 0x01	; 1
    13c8:	66 0f       	add	r22, r22
    13ca:	77 1f       	adc	r23, r23
    13cc:	88 1f       	adc	r24, r24
    13ce:	bb 1f       	adc	r27, r27
    13d0:	62 17       	cp	r22, r18
    13d2:	73 07       	cpc	r23, r19
    13d4:	84 07       	cpc	r24, r20
    13d6:	ba 07       	cpc	r27, r26
    13d8:	20 f0       	brcs	.+8      	; 0x13e2 <__divsf3_pse+0xaa>
    13da:	62 1b       	sub	r22, r18
    13dc:	73 0b       	sbc	r23, r19
    13de:	84 0b       	sbc	r24, r20
    13e0:	ba 0b       	sbc	r27, r26
    13e2:	ee 1f       	adc	r30, r30
    13e4:	88 f7       	brcc	.-30     	; 0x13c8 <__divsf3_pse+0x90>
    13e6:	e0 95       	com	r30
    13e8:	08 95       	ret

000013ea <__fixsfsi>:
    13ea:	04 d0       	rcall	.+8      	; 0x13f4 <__fixunssfsi>
    13ec:	68 94       	set
    13ee:	b1 11       	cpse	r27, r1
    13f0:	b5 c0       	rjmp	.+362    	; 0x155c <__fp_szero>
    13f2:	08 95       	ret

000013f4 <__fixunssfsi>:
    13f4:	98 d0       	rcall	.+304    	; 0x1526 <__fp_splitA>
    13f6:	88 f0       	brcs	.+34     	; 0x141a <__fixunssfsi+0x26>
    13f8:	9f 57       	subi	r25, 0x7F	; 127
    13fa:	90 f0       	brcs	.+36     	; 0x1420 <__fixunssfsi+0x2c>
    13fc:	b9 2f       	mov	r27, r25
    13fe:	99 27       	eor	r25, r25
    1400:	b7 51       	subi	r27, 0x17	; 23
    1402:	a0 f0       	brcs	.+40     	; 0x142c <__fixunssfsi+0x38>
    1404:	d1 f0       	breq	.+52     	; 0x143a <__fixunssfsi+0x46>
    1406:	66 0f       	add	r22, r22
    1408:	77 1f       	adc	r23, r23
    140a:	88 1f       	adc	r24, r24
    140c:	99 1f       	adc	r25, r25
    140e:	1a f0       	brmi	.+6      	; 0x1416 <__fixunssfsi+0x22>
    1410:	ba 95       	dec	r27
    1412:	c9 f7       	brne	.-14     	; 0x1406 <__fixunssfsi+0x12>
    1414:	12 c0       	rjmp	.+36     	; 0x143a <__fixunssfsi+0x46>
    1416:	b1 30       	cpi	r27, 0x01	; 1
    1418:	81 f0       	breq	.+32     	; 0x143a <__fixunssfsi+0x46>
    141a:	9f d0       	rcall	.+318    	; 0x155a <__fp_zero>
    141c:	b1 e0       	ldi	r27, 0x01	; 1
    141e:	08 95       	ret
    1420:	9c c0       	rjmp	.+312    	; 0x155a <__fp_zero>
    1422:	67 2f       	mov	r22, r23
    1424:	78 2f       	mov	r23, r24
    1426:	88 27       	eor	r24, r24
    1428:	b8 5f       	subi	r27, 0xF8	; 248
    142a:	39 f0       	breq	.+14     	; 0x143a <__fixunssfsi+0x46>
    142c:	b9 3f       	cpi	r27, 0xF9	; 249
    142e:	cc f3       	brlt	.-14     	; 0x1422 <__fixunssfsi+0x2e>
    1430:	86 95       	lsr	r24
    1432:	77 95       	ror	r23
    1434:	67 95       	ror	r22
    1436:	b3 95       	inc	r27
    1438:	d9 f7       	brne	.-10     	; 0x1430 <__fixunssfsi+0x3c>
    143a:	3e f4       	brtc	.+14     	; 0x144a <__fixunssfsi+0x56>
    143c:	90 95       	com	r25
    143e:	80 95       	com	r24
    1440:	70 95       	com	r23
    1442:	61 95       	neg	r22
    1444:	7f 4f       	sbci	r23, 0xFF	; 255
    1446:	8f 4f       	sbci	r24, 0xFF	; 255
    1448:	9f 4f       	sbci	r25, 0xFF	; 255
    144a:	08 95       	ret

0000144c <__floatunsisf>:
    144c:	e8 94       	clt
    144e:	09 c0       	rjmp	.+18     	; 0x1462 <__floatsisf+0x12>

00001450 <__floatsisf>:
    1450:	97 fb       	bst	r25, 7
    1452:	3e f4       	brtc	.+14     	; 0x1462 <__floatsisf+0x12>
    1454:	90 95       	com	r25
    1456:	80 95       	com	r24
    1458:	70 95       	com	r23
    145a:	61 95       	neg	r22
    145c:	7f 4f       	sbci	r23, 0xFF	; 255
    145e:	8f 4f       	sbci	r24, 0xFF	; 255
    1460:	9f 4f       	sbci	r25, 0xFF	; 255
    1462:	99 23       	and	r25, r25
    1464:	a9 f0       	breq	.+42     	; 0x1490 <__floatsisf+0x40>
    1466:	f9 2f       	mov	r31, r25
    1468:	96 e9       	ldi	r25, 0x96	; 150
    146a:	bb 27       	eor	r27, r27
    146c:	93 95       	inc	r25
    146e:	f6 95       	lsr	r31
    1470:	87 95       	ror	r24
    1472:	77 95       	ror	r23
    1474:	67 95       	ror	r22
    1476:	b7 95       	ror	r27
    1478:	f1 11       	cpse	r31, r1
    147a:	f8 cf       	rjmp	.-16     	; 0x146c <__floatsisf+0x1c>
    147c:	fa f4       	brpl	.+62     	; 0x14bc <__floatsisf+0x6c>
    147e:	bb 0f       	add	r27, r27
    1480:	11 f4       	brne	.+4      	; 0x1486 <__floatsisf+0x36>
    1482:	60 ff       	sbrs	r22, 0
    1484:	1b c0       	rjmp	.+54     	; 0x14bc <__floatsisf+0x6c>
    1486:	6f 5f       	subi	r22, 0xFF	; 255
    1488:	7f 4f       	sbci	r23, 0xFF	; 255
    148a:	8f 4f       	sbci	r24, 0xFF	; 255
    148c:	9f 4f       	sbci	r25, 0xFF	; 255
    148e:	16 c0       	rjmp	.+44     	; 0x14bc <__floatsisf+0x6c>
    1490:	88 23       	and	r24, r24
    1492:	11 f0       	breq	.+4      	; 0x1498 <__floatsisf+0x48>
    1494:	96 e9       	ldi	r25, 0x96	; 150
    1496:	11 c0       	rjmp	.+34     	; 0x14ba <__floatsisf+0x6a>
    1498:	77 23       	and	r23, r23
    149a:	21 f0       	breq	.+8      	; 0x14a4 <__floatsisf+0x54>
    149c:	9e e8       	ldi	r25, 0x8E	; 142
    149e:	87 2f       	mov	r24, r23
    14a0:	76 2f       	mov	r23, r22
    14a2:	05 c0       	rjmp	.+10     	; 0x14ae <__floatsisf+0x5e>
    14a4:	66 23       	and	r22, r22
    14a6:	71 f0       	breq	.+28     	; 0x14c4 <__floatsisf+0x74>
    14a8:	96 e8       	ldi	r25, 0x86	; 134
    14aa:	86 2f       	mov	r24, r22
    14ac:	70 e0       	ldi	r23, 0x00	; 0
    14ae:	60 e0       	ldi	r22, 0x00	; 0
    14b0:	2a f0       	brmi	.+10     	; 0x14bc <__floatsisf+0x6c>
    14b2:	9a 95       	dec	r25
    14b4:	66 0f       	add	r22, r22
    14b6:	77 1f       	adc	r23, r23
    14b8:	88 1f       	adc	r24, r24
    14ba:	da f7       	brpl	.-10     	; 0x14b2 <__floatsisf+0x62>
    14bc:	88 0f       	add	r24, r24
    14be:	96 95       	lsr	r25
    14c0:	87 95       	ror	r24
    14c2:	97 f9       	bld	r25, 7
    14c4:	08 95       	ret

000014c6 <__fp_inf>:
    14c6:	97 f9       	bld	r25, 7
    14c8:	9f 67       	ori	r25, 0x7F	; 127
    14ca:	80 e8       	ldi	r24, 0x80	; 128
    14cc:	70 e0       	ldi	r23, 0x00	; 0
    14ce:	60 e0       	ldi	r22, 0x00	; 0
    14d0:	08 95       	ret

000014d2 <__fp_nan>:
    14d2:	9f ef       	ldi	r25, 0xFF	; 255
    14d4:	80 ec       	ldi	r24, 0xC0	; 192
    14d6:	08 95       	ret

000014d8 <__fp_pscA>:
    14d8:	00 24       	eor	r0, r0
    14da:	0a 94       	dec	r0
    14dc:	16 16       	cp	r1, r22
    14de:	17 06       	cpc	r1, r23
    14e0:	18 06       	cpc	r1, r24
    14e2:	09 06       	cpc	r0, r25
    14e4:	08 95       	ret

000014e6 <__fp_pscB>:
    14e6:	00 24       	eor	r0, r0
    14e8:	0a 94       	dec	r0
    14ea:	12 16       	cp	r1, r18
    14ec:	13 06       	cpc	r1, r19
    14ee:	14 06       	cpc	r1, r20
    14f0:	05 06       	cpc	r0, r21
    14f2:	08 95       	ret

000014f4 <__fp_round>:
    14f4:	09 2e       	mov	r0, r25
    14f6:	03 94       	inc	r0
    14f8:	00 0c       	add	r0, r0
    14fa:	11 f4       	brne	.+4      	; 0x1500 <__fp_round+0xc>
    14fc:	88 23       	and	r24, r24
    14fe:	52 f0       	brmi	.+20     	; 0x1514 <__fp_round+0x20>
    1500:	bb 0f       	add	r27, r27
    1502:	40 f4       	brcc	.+16     	; 0x1514 <__fp_round+0x20>
    1504:	bf 2b       	or	r27, r31
    1506:	11 f4       	brne	.+4      	; 0x150c <__fp_round+0x18>
    1508:	60 ff       	sbrs	r22, 0
    150a:	04 c0       	rjmp	.+8      	; 0x1514 <__fp_round+0x20>
    150c:	6f 5f       	subi	r22, 0xFF	; 255
    150e:	7f 4f       	sbci	r23, 0xFF	; 255
    1510:	8f 4f       	sbci	r24, 0xFF	; 255
    1512:	9f 4f       	sbci	r25, 0xFF	; 255
    1514:	08 95       	ret

00001516 <__fp_split3>:
    1516:	57 fd       	sbrc	r21, 7
    1518:	90 58       	subi	r25, 0x80	; 128
    151a:	44 0f       	add	r20, r20
    151c:	55 1f       	adc	r21, r21
    151e:	59 f0       	breq	.+22     	; 0x1536 <__fp_splitA+0x10>
    1520:	5f 3f       	cpi	r21, 0xFF	; 255
    1522:	71 f0       	breq	.+28     	; 0x1540 <__fp_splitA+0x1a>
    1524:	47 95       	ror	r20

00001526 <__fp_splitA>:
    1526:	88 0f       	add	r24, r24
    1528:	97 fb       	bst	r25, 7
    152a:	99 1f       	adc	r25, r25
    152c:	61 f0       	breq	.+24     	; 0x1546 <__fp_splitA+0x20>
    152e:	9f 3f       	cpi	r25, 0xFF	; 255
    1530:	79 f0       	breq	.+30     	; 0x1550 <__fp_splitA+0x2a>
    1532:	87 95       	ror	r24
    1534:	08 95       	ret
    1536:	12 16       	cp	r1, r18
    1538:	13 06       	cpc	r1, r19
    153a:	14 06       	cpc	r1, r20
    153c:	55 1f       	adc	r21, r21
    153e:	f2 cf       	rjmp	.-28     	; 0x1524 <__fp_split3+0xe>
    1540:	46 95       	lsr	r20
    1542:	f1 df       	rcall	.-30     	; 0x1526 <__fp_splitA>
    1544:	08 c0       	rjmp	.+16     	; 0x1556 <__fp_splitA+0x30>
    1546:	16 16       	cp	r1, r22
    1548:	17 06       	cpc	r1, r23
    154a:	18 06       	cpc	r1, r24
    154c:	99 1f       	adc	r25, r25
    154e:	f1 cf       	rjmp	.-30     	; 0x1532 <__fp_splitA+0xc>
    1550:	86 95       	lsr	r24
    1552:	71 05       	cpc	r23, r1
    1554:	61 05       	cpc	r22, r1
    1556:	08 94       	sec
    1558:	08 95       	ret

0000155a <__fp_zero>:
    155a:	e8 94       	clt

0000155c <__fp_szero>:
    155c:	bb 27       	eor	r27, r27
    155e:	66 27       	eor	r22, r22
    1560:	77 27       	eor	r23, r23
    1562:	cb 01       	movw	r24, r22
    1564:	97 f9       	bld	r25, 7
    1566:	08 95       	ret

00001568 <__mulsf3>:
    1568:	0b d0       	rcall	.+22     	; 0x1580 <__mulsf3x>
    156a:	c4 cf       	rjmp	.-120    	; 0x14f4 <__fp_round>
    156c:	b5 df       	rcall	.-150    	; 0x14d8 <__fp_pscA>
    156e:	28 f0       	brcs	.+10     	; 0x157a <__mulsf3+0x12>
    1570:	ba df       	rcall	.-140    	; 0x14e6 <__fp_pscB>
    1572:	18 f0       	brcs	.+6      	; 0x157a <__mulsf3+0x12>
    1574:	95 23       	and	r25, r21
    1576:	09 f0       	breq	.+2      	; 0x157a <__mulsf3+0x12>
    1578:	a6 cf       	rjmp	.-180    	; 0x14c6 <__fp_inf>
    157a:	ab cf       	rjmp	.-170    	; 0x14d2 <__fp_nan>
    157c:	11 24       	eor	r1, r1
    157e:	ee cf       	rjmp	.-36     	; 0x155c <__fp_szero>

00001580 <__mulsf3x>:
    1580:	ca df       	rcall	.-108    	; 0x1516 <__fp_split3>
    1582:	a0 f3       	brcs	.-24     	; 0x156c <__mulsf3+0x4>

00001584 <__mulsf3_pse>:
    1584:	95 9f       	mul	r25, r21
    1586:	d1 f3       	breq	.-12     	; 0x157c <__mulsf3+0x14>
    1588:	95 0f       	add	r25, r21
    158a:	50 e0       	ldi	r21, 0x00	; 0
    158c:	55 1f       	adc	r21, r21
    158e:	62 9f       	mul	r22, r18
    1590:	f0 01       	movw	r30, r0
    1592:	72 9f       	mul	r23, r18
    1594:	bb 27       	eor	r27, r27
    1596:	f0 0d       	add	r31, r0
    1598:	b1 1d       	adc	r27, r1
    159a:	63 9f       	mul	r22, r19
    159c:	aa 27       	eor	r26, r26
    159e:	f0 0d       	add	r31, r0
    15a0:	b1 1d       	adc	r27, r1
    15a2:	aa 1f       	adc	r26, r26
    15a4:	64 9f       	mul	r22, r20
    15a6:	66 27       	eor	r22, r22
    15a8:	b0 0d       	add	r27, r0
    15aa:	a1 1d       	adc	r26, r1
    15ac:	66 1f       	adc	r22, r22
    15ae:	82 9f       	mul	r24, r18
    15b0:	22 27       	eor	r18, r18
    15b2:	b0 0d       	add	r27, r0
    15b4:	a1 1d       	adc	r26, r1
    15b6:	62 1f       	adc	r22, r18
    15b8:	73 9f       	mul	r23, r19
    15ba:	b0 0d       	add	r27, r0
    15bc:	a1 1d       	adc	r26, r1
    15be:	62 1f       	adc	r22, r18
    15c0:	83 9f       	mul	r24, r19
    15c2:	a0 0d       	add	r26, r0
    15c4:	61 1d       	adc	r22, r1
    15c6:	22 1f       	adc	r18, r18
    15c8:	74 9f       	mul	r23, r20
    15ca:	33 27       	eor	r19, r19
    15cc:	a0 0d       	add	r26, r0
    15ce:	61 1d       	adc	r22, r1
    15d0:	23 1f       	adc	r18, r19
    15d2:	84 9f       	mul	r24, r20
    15d4:	60 0d       	add	r22, r0
    15d6:	21 1d       	adc	r18, r1
    15d8:	82 2f       	mov	r24, r18
    15da:	76 2f       	mov	r23, r22
    15dc:	6a 2f       	mov	r22, r26
    15de:	11 24       	eor	r1, r1
    15e0:	9f 57       	subi	r25, 0x7F	; 127
    15e2:	50 40       	sbci	r21, 0x00	; 0
    15e4:	8a f0       	brmi	.+34     	; 0x1608 <__mulsf3_pse+0x84>
    15e6:	e1 f0       	breq	.+56     	; 0x1620 <__mulsf3_pse+0x9c>
    15e8:	88 23       	and	r24, r24
    15ea:	4a f0       	brmi	.+18     	; 0x15fe <__mulsf3_pse+0x7a>
    15ec:	ee 0f       	add	r30, r30
    15ee:	ff 1f       	adc	r31, r31
    15f0:	bb 1f       	adc	r27, r27
    15f2:	66 1f       	adc	r22, r22
    15f4:	77 1f       	adc	r23, r23
    15f6:	88 1f       	adc	r24, r24
    15f8:	91 50       	subi	r25, 0x01	; 1
    15fa:	50 40       	sbci	r21, 0x00	; 0
    15fc:	a9 f7       	brne	.-22     	; 0x15e8 <__mulsf3_pse+0x64>
    15fe:	9e 3f       	cpi	r25, 0xFE	; 254
    1600:	51 05       	cpc	r21, r1
    1602:	70 f0       	brcs	.+28     	; 0x1620 <__mulsf3_pse+0x9c>
    1604:	60 cf       	rjmp	.-320    	; 0x14c6 <__fp_inf>
    1606:	aa cf       	rjmp	.-172    	; 0x155c <__fp_szero>
    1608:	5f 3f       	cpi	r21, 0xFF	; 255
    160a:	ec f3       	brlt	.-6      	; 0x1606 <__mulsf3_pse+0x82>
    160c:	98 3e       	cpi	r25, 0xE8	; 232
    160e:	dc f3       	brlt	.-10     	; 0x1606 <__mulsf3_pse+0x82>
    1610:	86 95       	lsr	r24
    1612:	77 95       	ror	r23
    1614:	67 95       	ror	r22
    1616:	b7 95       	ror	r27
    1618:	f7 95       	ror	r31
    161a:	e7 95       	ror	r30
    161c:	9f 5f       	subi	r25, 0xFF	; 255
    161e:	c1 f7       	brne	.-16     	; 0x1610 <__mulsf3_pse+0x8c>
    1620:	fe 2b       	or	r31, r30
    1622:	88 0f       	add	r24, r24
    1624:	91 1d       	adc	r25, r1
    1626:	96 95       	lsr	r25
    1628:	87 95       	ror	r24
    162a:	97 f9       	bld	r25, 7
    162c:	08 95       	ret

0000162e <sin>:
    162e:	9f 93       	push	r25
    1630:	05 d0       	rcall	.+10     	; 0x163c <__fp_rempio2>
    1632:	0f 90       	pop	r0
    1634:	07 fc       	sbrc	r0, 7
    1636:	ee 5f       	subi	r30, 0xFE	; 254
    1638:	28 c0       	rjmp	.+80     	; 0x168a <__fp_sinus>
    163a:	4b cf       	rjmp	.-362    	; 0x14d2 <__fp_nan>

0000163c <__fp_rempio2>:
    163c:	74 df       	rcall	.-280    	; 0x1526 <__fp_splitA>
    163e:	e8 f3       	brcs	.-6      	; 0x163a <sin+0xc>
    1640:	e8 94       	clt
    1642:	e0 e0       	ldi	r30, 0x00	; 0
    1644:	bb 27       	eor	r27, r27
    1646:	9f 57       	subi	r25, 0x7F	; 127
    1648:	f0 f0       	brcs	.+60     	; 0x1686 <__fp_rempio2+0x4a>
    164a:	2a ed       	ldi	r18, 0xDA	; 218
    164c:	3f e0       	ldi	r19, 0x0F	; 15
    164e:	49 ec       	ldi	r20, 0xC9	; 201
    1650:	06 c0       	rjmp	.+12     	; 0x165e <__fp_rempio2+0x22>
    1652:	ee 0f       	add	r30, r30
    1654:	bb 0f       	add	r27, r27
    1656:	66 1f       	adc	r22, r22
    1658:	77 1f       	adc	r23, r23
    165a:	88 1f       	adc	r24, r24
    165c:	28 f0       	brcs	.+10     	; 0x1668 <__fp_rempio2+0x2c>
    165e:	b2 3a       	cpi	r27, 0xA2	; 162
    1660:	62 07       	cpc	r22, r18
    1662:	73 07       	cpc	r23, r19
    1664:	84 07       	cpc	r24, r20
    1666:	28 f0       	brcs	.+10     	; 0x1672 <__fp_rempio2+0x36>
    1668:	b2 5a       	subi	r27, 0xA2	; 162
    166a:	62 0b       	sbc	r22, r18
    166c:	73 0b       	sbc	r23, r19
    166e:	84 0b       	sbc	r24, r20
    1670:	e3 95       	inc	r30
    1672:	9a 95       	dec	r25
    1674:	72 f7       	brpl	.-36     	; 0x1652 <__fp_rempio2+0x16>
    1676:	80 38       	cpi	r24, 0x80	; 128
    1678:	30 f4       	brcc	.+12     	; 0x1686 <__fp_rempio2+0x4a>
    167a:	9a 95       	dec	r25
    167c:	bb 0f       	add	r27, r27
    167e:	66 1f       	adc	r22, r22
    1680:	77 1f       	adc	r23, r23
    1682:	88 1f       	adc	r24, r24
    1684:	d2 f7       	brpl	.-12     	; 0x167a <__fp_rempio2+0x3e>
    1686:	90 48       	sbci	r25, 0x80	; 128
    1688:	13 c0       	rjmp	.+38     	; 0x16b0 <__fp_mpack_finite>

0000168a <__fp_sinus>:
    168a:	ef 93       	push	r30
    168c:	e0 ff       	sbrs	r30, 0
    168e:	06 c0       	rjmp	.+12     	; 0x169c <__fp_sinus+0x12>
    1690:	a2 ea       	ldi	r26, 0xA2	; 162
    1692:	2a ed       	ldi	r18, 0xDA	; 218
    1694:	3f e0       	ldi	r19, 0x0F	; 15
    1696:	49 ec       	ldi	r20, 0xC9	; 201
    1698:	5f eb       	ldi	r21, 0xBF	; 191
    169a:	ec dd       	rcall	.-1064   	; 0x1274 <__addsf3x>
    169c:	2b df       	rcall	.-426    	; 0x14f4 <__fp_round>
    169e:	0f 90       	pop	r0
    16a0:	03 94       	inc	r0
    16a2:	01 fc       	sbrc	r0, 1
    16a4:	90 58       	subi	r25, 0x80	; 128
    16a6:	e4 e9       	ldi	r30, 0x94	; 148
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	0e c0       	rjmp	.+28     	; 0x16c8 <__fp_powsodd>

000016ac <__fp_mpack>:
    16ac:	9f 3f       	cpi	r25, 0xFF	; 255
    16ae:	31 f0       	breq	.+12     	; 0x16bc <__fp_mpack_finite+0xc>

000016b0 <__fp_mpack_finite>:
    16b0:	91 50       	subi	r25, 0x01	; 1
    16b2:	20 f4       	brcc	.+8      	; 0x16bc <__fp_mpack_finite+0xc>
    16b4:	87 95       	ror	r24
    16b6:	77 95       	ror	r23
    16b8:	67 95       	ror	r22
    16ba:	b7 95       	ror	r27
    16bc:	88 0f       	add	r24, r24
    16be:	91 1d       	adc	r25, r1
    16c0:	96 95       	lsr	r25
    16c2:	87 95       	ror	r24
    16c4:	97 f9       	bld	r25, 7
    16c6:	08 95       	ret

000016c8 <__fp_powsodd>:
    16c8:	9f 93       	push	r25
    16ca:	8f 93       	push	r24
    16cc:	7f 93       	push	r23
    16ce:	6f 93       	push	r22
    16d0:	ff 93       	push	r31
    16d2:	ef 93       	push	r30
    16d4:	9b 01       	movw	r18, r22
    16d6:	ac 01       	movw	r20, r24
    16d8:	47 df       	rcall	.-370    	; 0x1568 <__mulsf3>
    16da:	ef 91       	pop	r30
    16dc:	ff 91       	pop	r31
    16de:	05 d0       	rcall	.+10     	; 0x16ea <__fp_powser>
    16e0:	2f 91       	pop	r18
    16e2:	3f 91       	pop	r19
    16e4:	4f 91       	pop	r20
    16e6:	5f 91       	pop	r21
    16e8:	3f cf       	rjmp	.-386    	; 0x1568 <__mulsf3>

000016ea <__fp_powser>:
    16ea:	df 93       	push	r29
    16ec:	cf 93       	push	r28
    16ee:	1f 93       	push	r17
    16f0:	0f 93       	push	r16
    16f2:	ff 92       	push	r15
    16f4:	ef 92       	push	r14
    16f6:	df 92       	push	r13
    16f8:	7b 01       	movw	r14, r22
    16fa:	8c 01       	movw	r16, r24
    16fc:	68 94       	set
    16fe:	05 c0       	rjmp	.+10     	; 0x170a <__fp_powser+0x20>
    1700:	da 2e       	mov	r13, r26
    1702:	ef 01       	movw	r28, r30
    1704:	3d df       	rcall	.-390    	; 0x1580 <__mulsf3x>
    1706:	fe 01       	movw	r30, r28
    1708:	e8 94       	clt
    170a:	a5 91       	lpm	r26, Z+
    170c:	25 91       	lpm	r18, Z+
    170e:	35 91       	lpm	r19, Z+
    1710:	45 91       	lpm	r20, Z+
    1712:	55 91       	lpm	r21, Z+
    1714:	ae f3       	brts	.-22     	; 0x1700 <__fp_powser+0x16>
    1716:	ef 01       	movw	r28, r30
    1718:	ad dd       	rcall	.-1190   	; 0x1274 <__addsf3x>
    171a:	fe 01       	movw	r30, r28
    171c:	97 01       	movw	r18, r14
    171e:	a8 01       	movw	r20, r16
    1720:	da 94       	dec	r13
    1722:	79 f7       	brne	.-34     	; 0x1702 <__fp_powser+0x18>
    1724:	df 90       	pop	r13
    1726:	ef 90       	pop	r14
    1728:	ff 90       	pop	r15
    172a:	0f 91       	pop	r16
    172c:	1f 91       	pop	r17
    172e:	cf 91       	pop	r28
    1730:	df 91       	pop	r29
    1732:	08 95       	ret

00001734 <__muldi3>:
    1734:	df 93       	push	r29
    1736:	cf 93       	push	r28
    1738:	1f 93       	push	r17
    173a:	0f 93       	push	r16
    173c:	9a 9d       	mul	r25, r10
    173e:	f0 2d       	mov	r31, r0
    1740:	21 9f       	mul	r18, r17
    1742:	f0 0d       	add	r31, r0
    1744:	8b 9d       	mul	r24, r11
    1746:	f0 0d       	add	r31, r0
    1748:	8a 9d       	mul	r24, r10
    174a:	e0 2d       	mov	r30, r0
    174c:	f1 0d       	add	r31, r1
    174e:	03 9f       	mul	r16, r19
    1750:	f0 0d       	add	r31, r0
    1752:	02 9f       	mul	r16, r18
    1754:	e0 0d       	add	r30, r0
    1756:	f1 1d       	adc	r31, r1
    1758:	4e 9d       	mul	r20, r14
    175a:	e0 0d       	add	r30, r0
    175c:	f1 1d       	adc	r31, r1
    175e:	5e 9d       	mul	r21, r14
    1760:	f0 0d       	add	r31, r0
    1762:	4f 9d       	mul	r20, r15
    1764:	f0 0d       	add	r31, r0
    1766:	7f 93       	push	r23
    1768:	6f 93       	push	r22
    176a:	bf 92       	push	r11
    176c:	af 92       	push	r10
    176e:	5f 93       	push	r21
    1770:	4f 93       	push	r20
    1772:	d5 01       	movw	r26, r10
    1774:	09 d1       	rcall	.+530    	; 0x1988 <__umulhisi3>
    1776:	8b 01       	movw	r16, r22
    1778:	ac 01       	movw	r20, r24
    177a:	d7 01       	movw	r26, r14
    177c:	05 d1       	rcall	.+522    	; 0x1988 <__umulhisi3>
    177e:	eb 01       	movw	r28, r22
    1780:	e8 0f       	add	r30, r24
    1782:	f9 1f       	adc	r31, r25
    1784:	d6 01       	movw	r26, r12
    1786:	1f d0       	rcall	.+62     	; 0x17c6 <__muldi3_6>
    1788:	2f 91       	pop	r18
    178a:	3f 91       	pop	r19
    178c:	d6 01       	movw	r26, r12
    178e:	fc d0       	rcall	.+504    	; 0x1988 <__umulhisi3>
    1790:	c6 0f       	add	r28, r22
    1792:	d7 1f       	adc	r29, r23
    1794:	e8 1f       	adc	r30, r24
    1796:	f9 1f       	adc	r31, r25
    1798:	af 91       	pop	r26
    179a:	bf 91       	pop	r27
    179c:	14 d0       	rcall	.+40     	; 0x17c6 <__muldi3_6>
    179e:	2f 91       	pop	r18
    17a0:	3f 91       	pop	r19
    17a2:	f2 d0       	rcall	.+484    	; 0x1988 <__umulhisi3>
    17a4:	c6 0f       	add	r28, r22
    17a6:	d7 1f       	adc	r29, r23
    17a8:	e8 1f       	adc	r30, r24
    17aa:	f9 1f       	adc	r31, r25
    17ac:	d6 01       	movw	r26, r12
    17ae:	ec d0       	rcall	.+472    	; 0x1988 <__umulhisi3>
    17b0:	e6 0f       	add	r30, r22
    17b2:	f7 1f       	adc	r31, r23
    17b4:	98 01       	movw	r18, r16
    17b6:	be 01       	movw	r22, r28
    17b8:	cf 01       	movw	r24, r30
    17ba:	11 24       	eor	r1, r1
    17bc:	0f 91       	pop	r16
    17be:	1f 91       	pop	r17
    17c0:	cf 91       	pop	r28
    17c2:	df 91       	pop	r29
    17c4:	08 95       	ret

000017c6 <__muldi3_6>:
    17c6:	e0 d0       	rcall	.+448    	; 0x1988 <__umulhisi3>
    17c8:	46 0f       	add	r20, r22
    17ca:	57 1f       	adc	r21, r23
    17cc:	c8 1f       	adc	r28, r24
    17ce:	d9 1f       	adc	r29, r25
    17d0:	08 f4       	brcc	.+2      	; 0x17d4 <__muldi3_6+0xe>
    17d2:	31 96       	adiw	r30, 0x01	; 1
    17d4:	08 95       	ret

000017d6 <__moddi3>:
    17d6:	68 94       	set
    17d8:	01 c0       	rjmp	.+2      	; 0x17dc <__divdi3_moddi3>

000017da <__divdi3>:
    17da:	e8 94       	clt

000017dc <__divdi3_moddi3>:
    17dc:	f9 2f       	mov	r31, r25
    17de:	f1 2b       	or	r31, r17
    17e0:	0a f0       	brmi	.+2      	; 0x17e4 <__divdi3_moddi3+0x8>
    17e2:	27 c0       	rjmp	.+78     	; 0x1832 <__udivdi3_umoddi3>
    17e4:	a0 e0       	ldi	r26, 0x00	; 0
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	e7 ef       	ldi	r30, 0xF7	; 247
    17ea:	fb e0       	ldi	r31, 0x0B	; 11
    17ec:	93 c0       	rjmp	.+294    	; 0x1914 <__prologue_saves__+0xc>
    17ee:	09 2e       	mov	r0, r25
    17f0:	05 94       	asr	r0
    17f2:	1a f4       	brpl	.+6      	; 0x17fa <__divdi3_moddi3+0x1e>
    17f4:	79 d0       	rcall	.+242    	; 0x18e8 <__negdi2>
    17f6:	11 23       	and	r17, r17
    17f8:	92 f4       	brpl	.+36     	; 0x181e <__divdi3_moddi3+0x42>
    17fa:	f0 e8       	ldi	r31, 0x80	; 128
    17fc:	0f 26       	eor	r0, r31
    17fe:	ff ef       	ldi	r31, 0xFF	; 255
    1800:	e0 94       	com	r14
    1802:	f0 94       	com	r15
    1804:	00 95       	com	r16
    1806:	10 95       	com	r17
    1808:	b0 94       	com	r11
    180a:	c0 94       	com	r12
    180c:	d0 94       	com	r13
    180e:	a1 94       	neg	r10
    1810:	bf 0a       	sbc	r11, r31
    1812:	cf 0a       	sbc	r12, r31
    1814:	df 0a       	sbc	r13, r31
    1816:	ef 0a       	sbc	r14, r31
    1818:	ff 0a       	sbc	r15, r31
    181a:	0f 0b       	sbc	r16, r31
    181c:	1f 0b       	sbc	r17, r31
    181e:	13 d0       	rcall	.+38     	; 0x1846 <__udivmod64>
    1820:	07 fc       	sbrc	r0, 7
    1822:	62 d0       	rcall	.+196    	; 0x18e8 <__negdi2>
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
    1828:	ec e0       	ldi	r30, 0x0C	; 12
    182a:	90 c0       	rjmp	.+288    	; 0x194c <__epilogue_restores__+0xc>

0000182c <__umoddi3>:
    182c:	68 94       	set
    182e:	01 c0       	rjmp	.+2      	; 0x1832 <__udivdi3_umoddi3>

00001830 <__udivdi3>:
    1830:	e8 94       	clt

00001832 <__udivdi3_umoddi3>:
    1832:	8f 92       	push	r8
    1834:	9f 92       	push	r9
    1836:	cf 93       	push	r28
    1838:	df 93       	push	r29
    183a:	05 d0       	rcall	.+10     	; 0x1846 <__udivmod64>
    183c:	df 91       	pop	r29
    183e:	cf 91       	pop	r28
    1840:	9f 90       	pop	r9
    1842:	8f 90       	pop	r8
    1844:	08 95       	ret

00001846 <__udivmod64>:
    1846:	88 24       	eor	r8, r8
    1848:	99 24       	eor	r9, r9
    184a:	f4 01       	movw	r30, r8
    184c:	e4 01       	movw	r28, r8
    184e:	b0 e4       	ldi	r27, 0x40	; 64
    1850:	9f 93       	push	r25
    1852:	aa 27       	eor	r26, r26
    1854:	9a 15       	cp	r25, r10
    1856:	8b 04       	cpc	r8, r11
    1858:	9c 04       	cpc	r9, r12
    185a:	ed 05       	cpc	r30, r13
    185c:	fe 05       	cpc	r31, r14
    185e:	cf 05       	cpc	r28, r15
    1860:	d0 07       	cpc	r29, r16
    1862:	a1 07       	cpc	r26, r17
    1864:	98 f4       	brcc	.+38     	; 0x188c <__udivmod64+0x46>
    1866:	ad 2f       	mov	r26, r29
    1868:	dc 2f       	mov	r29, r28
    186a:	cf 2f       	mov	r28, r31
    186c:	fe 2f       	mov	r31, r30
    186e:	e9 2d       	mov	r30, r9
    1870:	98 2c       	mov	r9, r8
    1872:	89 2e       	mov	r8, r25
    1874:	98 2f       	mov	r25, r24
    1876:	87 2f       	mov	r24, r23
    1878:	76 2f       	mov	r23, r22
    187a:	65 2f       	mov	r22, r21
    187c:	54 2f       	mov	r21, r20
    187e:	43 2f       	mov	r20, r19
    1880:	32 2f       	mov	r19, r18
    1882:	22 27       	eor	r18, r18
    1884:	b8 50       	subi	r27, 0x08	; 8
    1886:	31 f7       	brne	.-52     	; 0x1854 <__udivmod64+0xe>
    1888:	bf 91       	pop	r27
    188a:	27 c0       	rjmp	.+78     	; 0x18da <__udivmod64+0x94>
    188c:	1b 2e       	mov	r1, r27
    188e:	bf 91       	pop	r27
    1890:	bb 27       	eor	r27, r27
    1892:	22 0f       	add	r18, r18
    1894:	33 1f       	adc	r19, r19
    1896:	44 1f       	adc	r20, r20
    1898:	55 1f       	adc	r21, r21
    189a:	66 1f       	adc	r22, r22
    189c:	77 1f       	adc	r23, r23
    189e:	88 1f       	adc	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	88 1c       	adc	r8, r8
    18a4:	99 1c       	adc	r9, r9
    18a6:	ee 1f       	adc	r30, r30
    18a8:	ff 1f       	adc	r31, r31
    18aa:	cc 1f       	adc	r28, r28
    18ac:	dd 1f       	adc	r29, r29
    18ae:	aa 1f       	adc	r26, r26
    18b0:	bb 1f       	adc	r27, r27
    18b2:	8a 14       	cp	r8, r10
    18b4:	9b 04       	cpc	r9, r11
    18b6:	ec 05       	cpc	r30, r12
    18b8:	fd 05       	cpc	r31, r13
    18ba:	ce 05       	cpc	r28, r14
    18bc:	df 05       	cpc	r29, r15
    18be:	a0 07       	cpc	r26, r16
    18c0:	b1 07       	cpc	r27, r17
    18c2:	48 f0       	brcs	.+18     	; 0x18d6 <__udivmod64+0x90>
    18c4:	8a 18       	sub	r8, r10
    18c6:	9b 08       	sbc	r9, r11
    18c8:	ec 09       	sbc	r30, r12
    18ca:	fd 09       	sbc	r31, r13
    18cc:	ce 09       	sbc	r28, r14
    18ce:	df 09       	sbc	r29, r15
    18d0:	a0 0b       	sbc	r26, r16
    18d2:	b1 0b       	sbc	r27, r17
    18d4:	21 60       	ori	r18, 0x01	; 1
    18d6:	1a 94       	dec	r1
    18d8:	e1 f6       	brne	.-72     	; 0x1892 <__udivmod64+0x4c>
    18da:	2e f4       	brtc	.+10     	; 0x18e6 <__udivmod64+0xa0>
    18dc:	94 01       	movw	r18, r8
    18de:	af 01       	movw	r20, r30
    18e0:	be 01       	movw	r22, r28
    18e2:	cd 01       	movw	r24, r26
    18e4:	00 0c       	add	r0, r0
    18e6:	08 95       	ret

000018e8 <__negdi2>:
    18e8:	60 95       	com	r22
    18ea:	70 95       	com	r23
    18ec:	80 95       	com	r24
    18ee:	90 95       	com	r25
    18f0:	30 95       	com	r19
    18f2:	40 95       	com	r20
    18f4:	50 95       	com	r21
    18f6:	21 95       	neg	r18
    18f8:	3f 4f       	sbci	r19, 0xFF	; 255
    18fa:	4f 4f       	sbci	r20, 0xFF	; 255
    18fc:	5f 4f       	sbci	r21, 0xFF	; 255
    18fe:	6f 4f       	sbci	r22, 0xFF	; 255
    1900:	7f 4f       	sbci	r23, 0xFF	; 255
    1902:	8f 4f       	sbci	r24, 0xFF	; 255
    1904:	9f 4f       	sbci	r25, 0xFF	; 255
    1906:	08 95       	ret

00001908 <__prologue_saves__>:
    1908:	2f 92       	push	r2
    190a:	3f 92       	push	r3
    190c:	4f 92       	push	r4
    190e:	5f 92       	push	r5
    1910:	6f 92       	push	r6
    1912:	7f 92       	push	r7
    1914:	8f 92       	push	r8
    1916:	9f 92       	push	r9
    1918:	af 92       	push	r10
    191a:	bf 92       	push	r11
    191c:	cf 92       	push	r12
    191e:	df 92       	push	r13
    1920:	ef 92       	push	r14
    1922:	ff 92       	push	r15
    1924:	0f 93       	push	r16
    1926:	1f 93       	push	r17
    1928:	cf 93       	push	r28
    192a:	df 93       	push	r29
    192c:	cd b7       	in	r28, 0x3d	; 61
    192e:	de b7       	in	r29, 0x3e	; 62
    1930:	ca 1b       	sub	r28, r26
    1932:	db 0b       	sbc	r29, r27
    1934:	0f b6       	in	r0, 0x3f	; 63
    1936:	f8 94       	cli
    1938:	de bf       	out	0x3e, r29	; 62
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	cd bf       	out	0x3d, r28	; 61
    193e:	09 94       	ijmp

00001940 <__epilogue_restores__>:
    1940:	2a 88       	ldd	r2, Y+18	; 0x12
    1942:	39 88       	ldd	r3, Y+17	; 0x11
    1944:	48 88       	ldd	r4, Y+16	; 0x10
    1946:	5f 84       	ldd	r5, Y+15	; 0x0f
    1948:	6e 84       	ldd	r6, Y+14	; 0x0e
    194a:	7d 84       	ldd	r7, Y+13	; 0x0d
    194c:	8c 84       	ldd	r8, Y+12	; 0x0c
    194e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1950:	aa 84       	ldd	r10, Y+10	; 0x0a
    1952:	b9 84       	ldd	r11, Y+9	; 0x09
    1954:	c8 84       	ldd	r12, Y+8	; 0x08
    1956:	df 80       	ldd	r13, Y+7	; 0x07
    1958:	ee 80       	ldd	r14, Y+6	; 0x06
    195a:	fd 80       	ldd	r15, Y+5	; 0x05
    195c:	0c 81       	ldd	r16, Y+4	; 0x04
    195e:	1b 81       	ldd	r17, Y+3	; 0x03
    1960:	aa 81       	ldd	r26, Y+2	; 0x02
    1962:	b9 81       	ldd	r27, Y+1	; 0x01
    1964:	ce 0f       	add	r28, r30
    1966:	d1 1d       	adc	r29, r1
    1968:	0f b6       	in	r0, 0x3f	; 63
    196a:	f8 94       	cli
    196c:	de bf       	out	0x3e, r29	; 62
    196e:	0f be       	out	0x3f, r0	; 63
    1970:	cd bf       	out	0x3d, r28	; 61
    1972:	ed 01       	movw	r28, r26
    1974:	08 95       	ret

00001976 <__adddi3>:
    1976:	2a 0d       	add	r18, r10
    1978:	3b 1d       	adc	r19, r11
    197a:	4c 1d       	adc	r20, r12
    197c:	5d 1d       	adc	r21, r13
    197e:	6e 1d       	adc	r22, r14
    1980:	7f 1d       	adc	r23, r15
    1982:	80 1f       	adc	r24, r16
    1984:	91 1f       	adc	r25, r17
    1986:	08 95       	ret

00001988 <__umulhisi3>:
    1988:	a2 9f       	mul	r26, r18
    198a:	b0 01       	movw	r22, r0
    198c:	b3 9f       	mul	r27, r19
    198e:	c0 01       	movw	r24, r0
    1990:	a3 9f       	mul	r26, r19
    1992:	70 0d       	add	r23, r0
    1994:	81 1d       	adc	r24, r1
    1996:	11 24       	eor	r1, r1
    1998:	91 1d       	adc	r25, r1
    199a:	b2 9f       	mul	r27, r18
    199c:	70 0d       	add	r23, r0
    199e:	81 1d       	adc	r24, r1
    19a0:	11 24       	eor	r1, r1
    19a2:	91 1d       	adc	r25, r1
    19a4:	08 95       	ret

000019a6 <atoi>:
    19a6:	fc 01       	movw	r30, r24
    19a8:	88 27       	eor	r24, r24
    19aa:	99 27       	eor	r25, r25
    19ac:	e8 94       	clt
    19ae:	21 91       	ld	r18, Z+
    19b0:	20 32       	cpi	r18, 0x20	; 32
    19b2:	e9 f3       	breq	.-6      	; 0x19ae <atoi+0x8>
    19b4:	29 30       	cpi	r18, 0x09	; 9
    19b6:	10 f0       	brcs	.+4      	; 0x19bc <atoi+0x16>
    19b8:	2e 30       	cpi	r18, 0x0E	; 14
    19ba:	c8 f3       	brcs	.-14     	; 0x19ae <atoi+0x8>
    19bc:	2b 32       	cpi	r18, 0x2B	; 43
    19be:	39 f0       	breq	.+14     	; 0x19ce <atoi+0x28>
    19c0:	2d 32       	cpi	r18, 0x2D	; 45
    19c2:	31 f4       	brne	.+12     	; 0x19d0 <atoi+0x2a>
    19c4:	68 94       	set
    19c6:	03 c0       	rjmp	.+6      	; 0x19ce <atoi+0x28>
    19c8:	2c d0       	rcall	.+88     	; 0x1a22 <__mulhi_const_10>
    19ca:	82 0f       	add	r24, r18
    19cc:	91 1d       	adc	r25, r1
    19ce:	21 91       	ld	r18, Z+
    19d0:	20 53       	subi	r18, 0x30	; 48
    19d2:	2a 30       	cpi	r18, 0x0A	; 10
    19d4:	c8 f3       	brcs	.-14     	; 0x19c8 <atoi+0x22>
    19d6:	1e f4       	brtc	.+6      	; 0x19de <atoi+0x38>
    19d8:	90 95       	com	r25
    19da:	81 95       	neg	r24
    19dc:	9f 4f       	sbci	r25, 0xFF	; 255
    19de:	08 95       	ret

000019e0 <strcmp>:
    19e0:	fb 01       	movw	r30, r22
    19e2:	dc 01       	movw	r26, r24
    19e4:	8d 91       	ld	r24, X+
    19e6:	01 90       	ld	r0, Z+
    19e8:	80 19       	sub	r24, r0
    19ea:	01 10       	cpse	r0, r1
    19ec:	d9 f3       	breq	.-10     	; 0x19e4 <strcmp+0x4>
    19ee:	99 0b       	sbc	r25, r25
    19f0:	08 95       	ret

000019f2 <__itoa_ncheck>:
    19f2:	bb 27       	eor	r27, r27
    19f4:	4a 30       	cpi	r20, 0x0A	; 10
    19f6:	31 f4       	brne	.+12     	; 0x1a04 <__itoa_ncheck+0x12>
    19f8:	99 23       	and	r25, r25
    19fa:	22 f4       	brpl	.+8      	; 0x1a04 <__itoa_ncheck+0x12>
    19fc:	bd e2       	ldi	r27, 0x2D	; 45
    19fe:	90 95       	com	r25
    1a00:	81 95       	neg	r24
    1a02:	9f 4f       	sbci	r25, 0xFF	; 255
    1a04:	38 c0       	rjmp	.+112    	; 0x1a76 <__utoa_common>

00001a06 <__ltoa_ncheck>:
    1a06:	bb 27       	eor	r27, r27
    1a08:	2a 30       	cpi	r18, 0x0A	; 10
    1a0a:	51 f4       	brne	.+20     	; 0x1a20 <__ltoa_ncheck+0x1a>
    1a0c:	99 23       	and	r25, r25
    1a0e:	42 f4       	brpl	.+16     	; 0x1a20 <__ltoa_ncheck+0x1a>
    1a10:	bd e2       	ldi	r27, 0x2D	; 45
    1a12:	90 95       	com	r25
    1a14:	80 95       	com	r24
    1a16:	70 95       	com	r23
    1a18:	61 95       	neg	r22
    1a1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a1c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a20:	09 c0       	rjmp	.+18     	; 0x1a34 <__ultoa_common>

00001a22 <__mulhi_const_10>:
    1a22:	7a e0       	ldi	r23, 0x0A	; 10
    1a24:	97 9f       	mul	r25, r23
    1a26:	90 2d       	mov	r25, r0
    1a28:	87 9f       	mul	r24, r23
    1a2a:	80 2d       	mov	r24, r0
    1a2c:	91 0d       	add	r25, r1
    1a2e:	11 24       	eor	r1, r1
    1a30:	08 95       	ret

00001a32 <__ultoa_ncheck>:
    1a32:	bb 27       	eor	r27, r27

00001a34 <__ultoa_common>:
    1a34:	fa 01       	movw	r30, r20
    1a36:	a6 2f       	mov	r26, r22
    1a38:	62 17       	cp	r22, r18
    1a3a:	71 05       	cpc	r23, r1
    1a3c:	81 05       	cpc	r24, r1
    1a3e:	91 05       	cpc	r25, r1
    1a40:	33 0b       	sbc	r19, r19
    1a42:	30 fb       	bst	r19, 0
    1a44:	66 f0       	brts	.+24     	; 0x1a5e <__ultoa_common+0x2a>
    1a46:	aa 27       	eor	r26, r26
    1a48:	66 0f       	add	r22, r22
    1a4a:	77 1f       	adc	r23, r23
    1a4c:	88 1f       	adc	r24, r24
    1a4e:	99 1f       	adc	r25, r25
    1a50:	aa 1f       	adc	r26, r26
    1a52:	a2 17       	cp	r26, r18
    1a54:	10 f0       	brcs	.+4      	; 0x1a5a <__ultoa_common+0x26>
    1a56:	a2 1b       	sub	r26, r18
    1a58:	63 95       	inc	r22
    1a5a:	38 50       	subi	r19, 0x08	; 8
    1a5c:	a9 f7       	brne	.-22     	; 0x1a48 <__ultoa_common+0x14>
    1a5e:	a0 5d       	subi	r26, 0xD0	; 208
    1a60:	aa 33       	cpi	r26, 0x3A	; 58
    1a62:	08 f0       	brcs	.+2      	; 0x1a66 <__ultoa_common+0x32>
    1a64:	a9 5d       	subi	r26, 0xD9	; 217
    1a66:	a1 93       	st	Z+, r26
    1a68:	36 f7       	brtc	.-52     	; 0x1a36 <__ultoa_common+0x2>
    1a6a:	b1 11       	cpse	r27, r1
    1a6c:	b1 93       	st	Z+, r27
    1a6e:	10 82       	st	Z, r1
    1a70:	ca 01       	movw	r24, r20
    1a72:	19 c0       	rjmp	.+50     	; 0x1aa6 <strrev>

00001a74 <__utoa_ncheck>:
    1a74:	bb 27       	eor	r27, r27

00001a76 <__utoa_common>:
    1a76:	fb 01       	movw	r30, r22
    1a78:	55 27       	eor	r21, r21
    1a7a:	aa 27       	eor	r26, r26
    1a7c:	88 0f       	add	r24, r24
    1a7e:	99 1f       	adc	r25, r25
    1a80:	aa 1f       	adc	r26, r26
    1a82:	a4 17       	cp	r26, r20
    1a84:	10 f0       	brcs	.+4      	; 0x1a8a <__utoa_common+0x14>
    1a86:	a4 1b       	sub	r26, r20
    1a88:	83 95       	inc	r24
    1a8a:	50 51       	subi	r21, 0x10	; 16
    1a8c:	b9 f7       	brne	.-18     	; 0x1a7c <__utoa_common+0x6>
    1a8e:	a0 5d       	subi	r26, 0xD0	; 208
    1a90:	aa 33       	cpi	r26, 0x3A	; 58
    1a92:	08 f0       	brcs	.+2      	; 0x1a96 <__utoa_common+0x20>
    1a94:	a9 5d       	subi	r26, 0xD9	; 217
    1a96:	a1 93       	st	Z+, r26
    1a98:	00 97       	sbiw	r24, 0x00	; 0
    1a9a:	79 f7       	brne	.-34     	; 0x1a7a <__utoa_common+0x4>
    1a9c:	b1 11       	cpse	r27, r1
    1a9e:	b1 93       	st	Z+, r27
    1aa0:	11 92       	st	Z+, r1
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	00 c0       	rjmp	.+0      	; 0x1aa6 <strrev>

00001aa6 <strrev>:
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	fc 01       	movw	r30, r24
    1aaa:	67 2f       	mov	r22, r23
    1aac:	71 91       	ld	r23, Z+
    1aae:	77 23       	and	r23, r23
    1ab0:	e1 f7       	brne	.-8      	; 0x1aaa <strrev+0x4>
    1ab2:	32 97       	sbiw	r30, 0x02	; 2
    1ab4:	04 c0       	rjmp	.+8      	; 0x1abe <strrev+0x18>
    1ab6:	7c 91       	ld	r23, X
    1ab8:	6d 93       	st	X+, r22
    1aba:	70 83       	st	Z, r23
    1abc:	62 91       	ld	r22, -Z
    1abe:	ae 17       	cp	r26, r30
    1ac0:	bf 07       	cpc	r27, r31
    1ac2:	c8 f3       	brcs	.-14     	; 0x1ab6 <strrev+0x10>
    1ac4:	08 95       	ret

00001ac6 <eeprom_read_word>:
    1ac6:	a8 e1       	ldi	r26, 0x18	; 24
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	42 e0       	ldi	r20, 0x02	; 2
    1acc:	50 e0       	ldi	r21, 0x00	; 0
    1ace:	05 c0       	rjmp	.+10     	; 0x1ada <eeprom_read_blraw>

00001ad0 <eeprom_write_word>:
    1ad0:	12 d0       	rcall	.+36     	; 0x1af6 <eeprom_write_byte>
    1ad2:	27 2f       	mov	r18, r23
    1ad4:	11 c0       	rjmp	.+34     	; 0x1af8 <eeprom_write_r18>

00001ad6 <eeprom_read_block>:
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22

00001ada <eeprom_read_blraw>:
    1ada:	fc 01       	movw	r30, r24
    1adc:	f9 99       	sbic	0x1f, 1	; 31
    1ade:	fe cf       	rjmp	.-4      	; 0x1adc <eeprom_read_blraw+0x2>
    1ae0:	06 c0       	rjmp	.+12     	; 0x1aee <eeprom_read_blraw+0x14>
    1ae2:	f2 bd       	out	0x22, r31	; 34
    1ae4:	e1 bd       	out	0x21, r30	; 33
    1ae6:	f8 9a       	sbi	0x1f, 0	; 31
    1ae8:	31 96       	adiw	r30, 0x01	; 1
    1aea:	00 b4       	in	r0, 0x20	; 32
    1aec:	0d 92       	st	X+, r0
    1aee:	41 50       	subi	r20, 0x01	; 1
    1af0:	50 40       	sbci	r21, 0x00	; 0
    1af2:	b8 f7       	brcc	.-18     	; 0x1ae2 <eeprom_read_blraw+0x8>
    1af4:	08 95       	ret

00001af6 <eeprom_write_byte>:
    1af6:	26 2f       	mov	r18, r22

00001af8 <eeprom_write_r18>:
    1af8:	f9 99       	sbic	0x1f, 1	; 31
    1afa:	fe cf       	rjmp	.-4      	; 0x1af8 <eeprom_write_r18>
    1afc:	92 bd       	out	0x22, r25	; 34
    1afe:	81 bd       	out	0x21, r24	; 33
    1b00:	20 bd       	out	0x20, r18	; 32
    1b02:	0f b6       	in	r0, 0x3f	; 63
    1b04:	f8 94       	cli
    1b06:	fa 9a       	sbi	0x1f, 2	; 31
    1b08:	f9 9a       	sbi	0x1f, 1	; 31
    1b0a:	0f be       	out	0x3f, r0	; 63
    1b0c:	01 96       	adiw	r24, 0x01	; 1
    1b0e:	08 95       	ret

00001b10 <_exit>:
    1b10:	f8 94       	cli

00001b12 <__stop_program>:
    1b12:	ff cf       	rjmp	.-2      	; 0x1b12 <__stop_program>
